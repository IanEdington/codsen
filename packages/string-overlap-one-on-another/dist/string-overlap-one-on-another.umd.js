/**
 * string-overlap-one-on-another
 * Lay one string on top of another, with an optional offset
 * Version: 1.5.56
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://gitlab.com/codsen/codsen/tree/master/packages/string-overlap-one-on-another
 */

!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).stringOverlapOneOnAnother=e()}(this,(function(){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}return function(e,n,o){if("string"!=typeof e)throw new Error("string-overlap-one-on-another: [THROW_ID_01] The first input argument must be a string but it was given as ".concat(JSON.stringify(e,null,4),', which is type "').concat(t(e),'"'));if("string"!=typeof n)throw new Error("string-overlap-one-on-another: [THROW_ID_02] The second input argument must be a string but it was given as ".concat(JSON.stringify(n,null,4),', which is type "').concat(t(n),'"'));var r,s={offset:0,offsetFillerCharacter:" "};if(o){if("object"!==t(o))throw new Error("string-overlap-one-on-another: [THROW_ID_03] The third input argument must be a plain object but it was given as ".concat(JSON.stringify(n,null,4),', which is type "').concat(t(o),'"'));if((r=Object.assign({},s,o)).offset){if(!Number.isInteger(Math.abs(r.offset)))throw new Error("string-overlap-one-on-another: [THROW_ID_04] The second input argument must be a string but it was given as ".concat(JSON.stringify(n,null,4),', which is type "').concat(t(n),'"'))}else r.offset=0;r.offsetFillerCharacter||""===r.offsetFillerCharacter||(r.offsetFillerCharacter=" ")}else r=s;return 0===n.length?e:0===e.length?n:r.offset<0?n+(Math.abs(r.offset)>n.length?r.offsetFillerCharacter.repeat(Math.abs(r.offset)-n.length):"")+e.slice(n.length-Math.abs(r.offset)>0?n.length-Math.abs(r.offset):0):r.offset>0?e.slice(0,r.offset)+(r.offset>e.length?r.offsetFillerCharacter.repeat(Math.abs(r.offset)-e.length):"")+n+(e.length-r.offset-n.length>0?e.slice(e.length-r.offset-n.length+1):""):n+(e.length>n.length?e.slice(n.length):"")}}));
