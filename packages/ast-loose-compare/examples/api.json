{"_quickTake.js":{"title":"Quick Take","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport looseCompare from \"ast-loose-compare\";\n\nassert.equal(\n  looseCompare(\n    &#x7B;\n      a: &#x7B;\n        b: \"d\",\n        c: [],\n        e: \"f\",\n        g: \"h\",\n      &#x7D;,\n    &#x7D;,\n    &#x7B;\n      a: &#x7B;\n        b: \"d\",\n        c: [],\n      &#x7D;,\n    &#x7D;\n  ),\n  true\n);"},"more-examples.js":{"title":"More Examples","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport looseCompare from \"ast-loose-compare\";\n\nassert.equal(\n  looseCompare(&#x7B; a: \"1\", b: \"2\", c: \"3\" &#x7D;, &#x7B; a: \"1\", b: \"2\" &#x7D;),\n  true\n);\n// true, because second (smallObj) is subset of (or equal) first (bigObj).\n\nassert.equal(\n  looseCompare(&#x7B; a: \"1\", b: \"2\" &#x7D;, &#x7B; a: \"1\", b: \"2\", c: \"3\" &#x7D;),\n  false\n);\n// false, because second (smallObj) is not a subset (or equal) to first (bigObj).\n\nassert.equal(looseCompare([\"a\", \"b\", \"c\"], [\"a\", \"b\"]), true);\n// true, because second is a subset of first\n\nassert.equal(looseCompare([\"a\", \"b\"], [\"a\", \"b\", \"c\"]), false);\n// false, because second is not a subset of first\n\nassert.equal(looseCompare(\"aaaaa\\nbbbbb\", \"aaaaa\\nbbbbb\"), true);\n// true, because strings are equal\n\nassert.equal(looseCompare(&#x7B; a: \"a\" &#x7D;), undefined);\n// the second argument is missing"},"whitespace.js":{"title":"Empty Values","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport looseCompare from \"ast-loose-compare\";\n\n// both values are empty - they trim() to zero-length\nassert.equal(\n  looseCompare(\n    &#x7B;\n      a: \"a\",\n      b: \"\\n \\n\\n\",\n    &#x7D;,\n    &#x7B;\n      a: \"a\",\n      b: \"\\t\\t \\t\",\n    &#x7D;\n  ),\n  true\n);"}}