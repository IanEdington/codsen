/**
 * codsen-parser
 * Parser aiming at broken or mixed code, especially HTML & CSS
 * Version: 0.9.2
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://codsen.com/os/codsen-parser/
 */

import{pathNext as e,pathUp as t,pathPrev as n}from"ast-monkey-util";import{findMalformed as r}from"string-find-malformed";import{left as o,right as i}from"string-left-right";import{tokenizer as l}from"codsen-tokenizer";import a from"object-path";const s="0.9.2",c={reportProgressFunc:null,reportProgressFuncFrom:0,reportProgressFuncTo:100,tagCb:null,charCb:null,errCb:null};function g(e){return e&&"object"==typeof e&&!Array.isArray(e)}function u(e,t){return t.closing&&e.length&&(e[e.length-1].type===t.type&&Object.prototype.hasOwnProperty.call(e[e.length-1],"tagName")&&Object.prototype.hasOwnProperty.call(t,"tagName")&&e[e.length-1].tagName===t.tagName&&!1===e[e.length-1].closing||"comment"===t.type&&e.some((e=>Object.prototype.hasOwnProperty.call(e,"closing")&&!e.closing)))}function p(s,p){if("string"!=typeof s)throw void 0===s?new Error("codsen-tokenizer: [THROW_ID_01] the first input argument is completely missing! It should be given as string."):new Error(`codsen-tokenizer: [THROW_ID_02] the first input argument must be string! It was given as "${typeof s}", equal to:\n${JSON.stringify(s,null,4)}`);if(p&&!g(p))throw new Error(`codsen-tokenizer: [THROW_ID_03] the second input argument, an options object, should be a plain object but it was given as type ${typeof p}, equal to ${JSON.stringify(p,null,4)}`);if(p&&g(p)&&p.tagCb&&"function"!=typeof p.tagCb)throw new Error(`codsen-tokenizer: [THROW_ID_04] the opts.tagCb, callback function, should be a function but it was given as type ${typeof p.tagCb}, equal to ${JSON.stringify(p.tagCb,null,4)}`);if(p&&g(p)&&p.charCb&&"function"!=typeof p.charCb)throw new Error(`codsen-tokenizer: [THROW_ID_05] the opts.charCb, callback function, should be a function but it was given as type ${typeof p.charCb}, equal to ${JSON.stringify(p.charCb,null,4)}`);if(p&&g(p)&&p.reportProgressFunc&&"function"!=typeof p.reportProgressFunc)throw new Error(`codsen-tokenizer: [THROW_ID_06] the opts.reportProgressFunc, callback function, should be a function but it was given as type ${typeof p.reportProgressFunc}, equal to ${JSON.stringify(p.reportProgressFunc,null,4)}`);if(p&&g(p)&&p.errCb&&"function"!=typeof p.errCb)throw new Error(`codsen-tokenizer: [THROW_ID_07] the opts.errCb, callback function, should be a function but it was given as type ${typeof p.errCb}, equal to ${JSON.stringify(p.errCb,null,4)}`);const d={...c,...p},m=[],h=[];let y="",f=!1,b={};const v=["tag","comment"],x=["doctype"];return l(s,{reportProgressFunc:d.reportProgressFunc,reportProgressFuncFrom:d.reportProgressFuncFrom,reportProgressFuncTo:d.reportProgressFuncTo,tagCbLookahead:2,tagCb:(l,s)=>{if("function"==typeof d.tagCb&&d.tagCb(l),!l.nested){let c=a.get(h,y);if(g(c)||(c=null),!f||l.closing||b.closing||"text"===b.type||c&&c.tagName===l.tagName&&!c.closing&&l.closing||u(m,l)||s.length&&"text"===l.type&&"tag"===s[0].type&&(s[0].closing&&b.closing||m[m.length-3]&&s[0].tagName!==m[m.length-1].tagName&&"tag"===m[m.length-3].type&&!m[m.length-3].closing&&s[0].tagName===m[m.length-3].tagName))if(l.closing&&"string"==typeof y&&y.includes(".")&&(!l.tagName||b.tagName!==l.tagName||b.closing)){if(y=e(t(y)),u(m,l)){for(;m.length&&m[m.length-1].type!==l.type&&m[m.length-1].kind!==l.kind;)m.pop();m.pop(),f=!1}else if(m.length&&l.tagName&&m.some((e=>"tag"===e.type&&e.tagName===l.tagName))){let n=m.pop(),r=n.tagName,o=0;for(;r!==l.tagName;)o++,n&&"function"==typeof d.errCb&&d.errCb({ruleId:`${n.type}${"comment"===n.type?`-${n.kind}`:""}-missing-closing`,idxFrom:n.start,idxTo:n.end,tokenObj:n}),n=m.pop(),r=n.tagName,r===l.tagName&&o>1||(y=e(t(y)))}else if(m.length>1&&m[m.length-2].type===l.type&&m[m.length-2].type===l.type&&m[m.length-2].tagName===l.tagName){if("function"==typeof d.errCb){const e=m[m.length-1];d.errCb({ruleId:"tag-rogue",idxFrom:e.start,idxTo:e.end,tokenObj:e})}m.pop(),m.pop()}}else y?(y=e(y),u(m,l)&&m.pop()):y="0";else f=!1,y=`${y}.children.0`;v.includes(l.type)&&!l.void&&Object.prototype.hasOwnProperty.call(l,"closing")&&!l.closing&&(f=!0,l.kind&&x.includes(l.kind)||m.push({...l}));const p=n(y)||"",C=t(y);let F,$;C&&y.includes(".")&&(F=a.get(h,C)),p&&($=a.get(h,p));const k=/(-+|-+[^>])>/;let N,O;g($)&&Array.isArray($.children)&&$.children.length&&$.children[$.children.length-1]&&(N=$.children[$.children.length-1],O=`${p}.children.${a.get(h,p).children.length-1}`);let w=!1;if("text"===l.type&&g(F)&&"comment"===F.type&&"simple"===F.kind&&!F.closing&&k.test(l.value)){const n=(k.exec(l.value)||{}).index,r=(n||0)+l.value.slice(n).indexOf(">")+1;n&&n>0&&(a.set(h,y,{...l,end:l.start+n,value:l.value.slice(0,n)}),v.includes(l.type)&&(l.children=[])),y=e(t(y)),a.set(h,y,{type:"comment",kind:"simple",closing:!0,start:l.start+(n||0),end:l.start+r,value:l.value.slice(n,r),children:[]}),r<l.value.length&&(y=e(y),a.set(h,y,{type:"text",start:l.start+r,end:l.end,value:l.value.slice(r)})),w=!0}else if("comment"===l.type&&"only"===l.kind&&g($))if("text"===$.type&&$.value.trim()&&"<!-".includes($.value[o($.value,$.value.length)])){const e=[];if(r($.value,"\x3c!--",(t=>{e.push(t)}),{maxDistance:2}),e.length&&!i($.value,e[e.length-1].idxTo-1)){const t=e.pop();!o($.value,t.idxFrom)&&p&&g($)?(v.includes(l.type)&&(l.children=[]),y=p,a.set(h,y,{...l,start:t.idxFrom+$.start,kind:"not",value:`${$.value}${l.value}`}),w=!0):p&&g($)&&(a.set(h,p,{...$,end:t.idxFrom+$.start,value:$.value.slice(0,t.idxFrom)}),v.includes(l.type)&&(l.children=[]),a.set(h,y,{...l,start:t.idxFrom+$.start,kind:"not",value:`${$.value.slice(t.idxFrom)}${l.value}`}),w=!0)}}else if(g(N)&&"text"===N.type&&N.value.trim()&&"<!-".includes(N.value[o(N.value,N.value.length)])){const e=[];if(r(N.value,"\x3c!--",(t=>{e.push(t)}),{maxDistance:2}),e.length&&!i(N.value,e[e.length-1].idxTo-1)){const t=e.pop();!o(N.value,t.idxFrom)&&p&&g(N)?(v.includes(l.type)&&(l.children=[]),a.set(h,y,{...l,start:t.idxFrom+N.start,kind:"not",value:`${N.value}${l.value}`}),a.del(h,`${p}.children.${a.get(h,p).children.length-1}`),w=!0):p&&g(N)&&O&&(a.set(h,O,{...N,end:t.idxFrom+N.start,value:N.value.slice(0,t.idxFrom)}),v.includes(l.type)&&(l.children=[]),a.set(h,y,{...l,start:t.idxFrom+N.start,kind:"not",value:`${N.value.slice(t.idxFrom)}${l.value}`}),w=!0)}}w||(v.includes(l.type)&&(l.children=[]),a.set(h,y,l)),!v.includes(l.type)||!l.closing||p&&g($)&&!$.closing&&$.type===l.type&&$.tagName===l.tagName||(l.void?"function"==typeof d.errCb&&d.errCb({ruleId:"tag-void-frontal-slash",idxFrom:l.start,idxTo:l.end,fix:{ranges:[[l.start+1,l.tagNameStartsAt]]},tokenObj:l}):"function"==typeof d.errCb&&d.errCb({ruleId:`${l.type}${"comment"===l.type?`-${l.kind}`:""}-missing-opening`,idxFrom:l.start,idxTo:l.end,tokenObj:l})),b={...l}}},charCb:d.charCb}),m.length&&m.forEach((e=>{"function"==typeof d.errCb&&d.errCb({ruleId:`${e.type}${"comment"===e.type?`-${e.kind}`:""}-missing-closing`,idxFrom:e.start,idxTo:e.end,tokenObj:e})})),h}export{p as cparser,c as defaults,s as version};
