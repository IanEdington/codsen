/**
 * string-range-expander
 * Expands string index ranges within whitespace boundaries until letters are met
 * Version: 1.10.58
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://gitlab.com/codsen/codsen/tree/master/packages/string-range-expander
 */

!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).stringRangeExpander=t()}(this,(function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}return function(t){var i,n=/^[0-9a-zA-Z]+$/;function o(e){return!(!e||"string"!=typeof e)&&!e.trim()}function r(e){return"string"==typeof e}if(!t||"object"!==e(t)||Array.isArray(t))throw i=void 0===t?"but it is missing completely.":null===t?"but it was given as null.":"but it was given as ".concat(e(t),", equal to:\n").concat(JSON.stringify(t,null,4),"."),new Error("string-range-expander: [THROW_ID_01] Input must be a plain object ".concat(i));if("object"===e(t)&&null!==t&&!Array.isArray(t)&&!Object.keys(t).length)throw new Error("string-range-expander: [THROW_ID_02] Input must be a plain object but it was given as a plain object without any keys.");if("number"!=typeof t.from)throw new Error("string-range-expander: [THROW_ID_03] The input's \"from\" value opts.from, is not a number! Currently it's given as ".concat(e(t.from),", equal to ").concat(JSON.stringify(t.from,null,0)));if("number"!=typeof t.to)throw new Error("string-range-expander: [THROW_ID_04] The input's \"to\" value opts.to, is not a number! Currently it's given as ".concat(e(t.to),", equal to ").concat(JSON.stringify(t.to,null,0)));if(!t.str[t.from]&&t.from!==t.to)throw new Error('string-range-expander: [THROW_ID_05] The given input string opts.str ("'.concat(t.str,'") must contain the character at index "from" ("').concat(t.from,'")'));if(!t.str[t.to-1])throw new Error('string-range-expander: [THROW_ID_06] The given input string, opts.str ("'.concat(t.str,'") must contain the character at index before "to" ("').concat(t.to-1,'")'));if(t.from>t.to)throw new Error('string-range-expander: [THROW_ID_07] The given "from" index, "'.concat(t.from,'" is greater than "to" index, "').concat(t.to,"\". That's wrong!"));if(r(t.extendToOneSide)&&"left"!==t.extendToOneSide&&"right"!==t.extendToOneSide||!r(t.extendToOneSide)&&void 0!==t.extendToOneSide&&!1!==t.extendToOneSide)throw new Error("string-range-expander: [THROW_ID_08] The opts.extendToOneSide value is not recogniseable! It's set to: \"".concat(t.extendToOneSide,'" (').concat(e(t.extendToOneSide),'). It has to be either Boolean "false" or strings "left" or "right"'));var s=Object.assign({},{str:"",from:0,to:0,ifLeftSideIncludesThisThenCropTightly:"",ifLeftSideIncludesThisCropItToo:"",ifRightSideIncludesThisThenCropTightly:"",ifRightSideIncludesThisCropItToo:"",extendToOneSide:!1,wipeAllWhitespaceOnLeft:!1,wipeAllWhitespaceOnRight:!1,addSingleSpaceToPreventAccidentalConcatenation:!1},t);if(Array.isArray(s.ifLeftSideIncludesThisThenCropTightly)){var l,d;if(!s.ifLeftSideIncludesThisThenCropTightly.every((function(e,t){return!!r(e)||(l=t,d=e,!1)})))throw new Error("string-range-expander: [THROW_ID_09] The opts.ifLeftSideIncludesThisThenCropTightly was set to an array:\n".concat(JSON.stringify(s.ifLeftSideIncludesThisThenCropTightly,null,4),". Now, that array contains not only string elements. For example, an element at index ").concat(l," is of a type ").concat(e(d)," (equal to ").concat(JSON.stringify(d,null,0),")."));s.ifLeftSideIncludesThisThenCropTightly=s.ifLeftSideIncludesThisThenCropTightly.join("")}var h=s.str,c=s.from,f=s.to;if("right"!==s.extendToOneSide&&(o(h[c-1])&&(o(h[c-2])||s.ifLeftSideIncludesThisCropItToo.includes(h[c-2]))||h[c-1]&&s.ifLeftSideIncludesThisCropItToo.includes(h[c-1])||s.wipeAllWhitespaceOnLeft&&o(h[c-1])))for(var a=c;a--;)if(!s.ifLeftSideIncludesThisCropItToo.includes(h[a])){if(h[a].trim()){c=s.wipeAllWhitespaceOnLeft||s.ifLeftSideIncludesThisCropItToo.includes(h[a+1])?a+1:a+2;break}if(0===a){c=s.wipeAllWhitespaceOnLeft?0:1;break}}if("left"!==s.extendToOneSide&&(o(h[f])&&(s.wipeAllWhitespaceOnRight||o(h[f+1]))||s.ifRightSideIncludesThisCropItToo.includes(h[f])))for(var T=f,u=h.length;T<u;T++)if(!s.ifRightSideIncludesThisCropItToo.includes(h[T])&&(h[T]&&h[T].trim()||void 0===h[T])){f=s.wipeAllWhitespaceOnRight||s.ifRightSideIncludesThisCropItToo.includes(h[T-1])?T:T-1;break}return("right"!==s.extendToOneSide&&r(s.ifLeftSideIncludesThisThenCropTightly)&&s.ifLeftSideIncludesThisThenCropTightly&&(h[c-2]&&s.ifLeftSideIncludesThisThenCropTightly.includes(h[c-2])||h[c-1]&&s.ifLeftSideIncludesThisThenCropTightly.includes(h[c-1]))||"left"!==s.extendToOneSide&&r(s.ifRightSideIncludesThisThenCropTightly)&&s.ifRightSideIncludesThisThenCropTightly&&(h[f+1]&&s.ifRightSideIncludesThisThenCropTightly.includes(h[f+1])||h[f]&&s.ifRightSideIncludesThisThenCropTightly.includes(h[f])))&&("right"!==s.extendToOneSide&&o(h[c-1])&&!s.wipeAllWhitespaceOnLeft&&c--,"left"!==s.extendToOneSide&&o(h[f])&&!s.wipeAllWhitespaceOnRight&&f++),s.addSingleSpaceToPreventAccidentalConcatenation&&h[c-1]&&h[c-1].trim()&&h[f]&&h[f].trim()&&(!s.ifLeftSideIncludesThisThenCropTightly&&!s.ifRightSideIncludesThisThenCropTightly||s.ifLeftSideIncludesThisThenCropTightly&&!s.ifLeftSideIncludesThisThenCropTightly.includes(h[c-1])||!(!s.ifRightSideIncludesThisThenCropTightly||h[f]&&s.ifRightSideIncludesThisThenCropTightly.includes(h[f])))&&(n.test(h[c-1])||n.test(h[f]))?[c,f," "]:[c,f]}}));
