{"_quickTake.js":{"title":"Quick Take","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; fillMissing &#x7D; from \"object-fill-missing-keys\";\n\n// deleting key 'c', with value 'd'\nassert.deepEqual(\n  fillMissing(\n    &#x7B;\n      // input object that could have came from JSON\n      b: \"b\",\n    &#x7D;,\n    &#x7B;\n      // schema reference object\n      a: false,\n      b: false,\n      c: false,\n    &#x7D;\n  ),\n  &#x7B;\n    // patched result\n    a: false,\n    b: \"b\",\n    c: false,\n  &#x7D;\n);"},"do-not-fill.js":{"title":"An option to not fill the paths if they contain placeholders","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; fillMissing &#x7D; from \"object-fill-missing-keys\";\n\nassert.deepEqual(\n  fillMissing(\n    &#x7B;\n      // input object\n      a: &#x7B;\n        b: false, // <---- we don't want to automatically normalise this key\n        x: \"x\",\n      &#x7D;,\n      z: \"z\",\n    &#x7D;,\n    &#x7B;\n      // reference schema object\n      a: &#x7B;\n        b: &#x7B;\n          c: false,\n          d: false,\n        &#x7D;,\n        x: false,\n      &#x7D;,\n      z: false,\n    &#x7D;,\n    &#x7B;\n      doNotFillThesePathsIfTheyContainPlaceholders: [\"a.b\"],\n    &#x7D;\n  ),\n  &#x7B;\n    a: &#x7B;\n      b: false, // <---\n      x: \"x\",\n    &#x7D;,\n    z: \"z\",\n  &#x7D;\n);"},"truncation.js":{"title":"Truncation upon request, to minimize the object footprint","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; fillMissing &#x7D; from \"object-fill-missing-keys\";\n\nassert.deepEqual(\n  fillMissing(\n    &#x7B;\n      // input object\n      a: &#x7B;\n        b: &#x7B;\n          // this object in \"b\"'s value will be removed and set to placeholder \"false\"\n          c: false,\n          d: false,\n        &#x7D;,\n        x: &#x7B;\n          // this too\n          y: false,\n        &#x7D;,\n      &#x7D;,\n      z: \"z\",\n    &#x7D;,\n    &#x7B;\n      // schema object\n      a: &#x7B;\n        b: &#x7B;\n          c: false,\n          d: false,\n        &#x7D;,\n        x: false,\n      &#x7D;,\n      z: false,\n    &#x7D;,\n    &#x7B;\n      // settings\n      doNotFillThesePathsIfTheyContainPlaceholders: [\"lalala\", \"a.b\", \"a.x\"],\n    &#x7D;\n  ),\n  &#x7B;\n    // result\n    a: &#x7B;\n      b: false,\n      x: false,\n    &#x7D;,\n    z: \"z\",\n  &#x7D;\n);"},"useNullAsExplicitFalse.js":{"title":"`opts.useNullAsExplicitFalse`","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; fillMissing &#x7D; from \"object-fill-missing-keys\";\n\n// on\nassert.deepEqual(\n  fillMissing(\n    &#x7B;\n      // object we're working on\n      a: null,\n    &#x7D;,\n    &#x7B;\n      // reference schema\n      a: [\"z\"],\n    &#x7D;,\n    &#x7B;\n      // options\n      useNullAsExplicitFalse: true, // <--- !\n    &#x7D;\n  ),\n  &#x7B;\n    // result\n    a: null,\n  &#x7D;\n);\n\n// off\nassert.deepEqual(\n  fillMissing(\n    &#x7B;\n      // object we're working on\n      a: null,\n    &#x7D;,\n    &#x7B;\n      // reference schema\n      a: [\"z\"],\n    &#x7D;,\n    &#x7B;\n      // options\n      useNullAsExplicitFalse: false, // <--- !\n    &#x7D;\n  ),\n  &#x7B;\n    // result\n    a: [\"z\"],\n  &#x7D;\n);"},"using-placeholder-true.js":{"title":"Using placeholder to cause the value population","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; fillMissing &#x7D; from \"object-fill-missing-keys\";\n\nassert.deepEqual(\n  fillMissing(\n    &#x7B;\n      // object we work upon\n      a: &#x7B;\n        b: true, // <-- not placeholder but lower in data hierarchy (boolean)\n        x: \"x\",\n      &#x7D;,\n      z: \"z\",\n    &#x7D;,\n    &#x7B;\n      // reference (schema) object\n      a: &#x7B;\n        b: &#x7B;\n          c: false,\n          d: false,\n        &#x7D;,\n        x: false,\n      &#x7D;,\n      z: false,\n    &#x7D;,\n    &#x7B;\n      doNotFillThesePathsIfTheyContainPlaceholders: [\"a.b\"],\n    &#x7D;\n  ),\n  &#x7B;\n    a: &#x7B;\n      b: &#x7B;\n        c: false, // <---- values added!\n        d: false, // <---- values added!\n      &#x7D;,\n      x: \"x\",\n    &#x7D;,\n    z: \"z\",\n  &#x7D;\n);"}}