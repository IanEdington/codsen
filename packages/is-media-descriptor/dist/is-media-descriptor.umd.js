/**
 * is-media-descriptor
 * Is given string a valid media descriptor (including media query)?
 * Version: 1.1.0
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://gitlab.com/codsen/codsen/tree/master/packages/is-media-descriptor
 */

!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).isMediaDescriptor=t()}(this,(function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var o=[],n=!0,f=!1,s=void 0;try{for(var i,r=e[Symbol.iterator]();!(n=(i=r.next()).done)&&(o.push(i.value),!t||o.length!==t);n=!0);}catch(e){f=!0,s=e}finally{try{n||null==r.return||r.return()}finally{if(f)throw s}}return o}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}const o=[],n=[],f=(e,t)=>{if(e===t)return 0;const f=e;e.length>t.length&&(e=t,t=f);let s=e.length,i=t.length;for(;s>0&&e.charCodeAt(~-s)===t.charCodeAt(~-i);)s--,i--;let r,l,a,u,c=0;for(;c<s&&e.charCodeAt(c)===t.charCodeAt(c);)c++;if(s-=c,i-=c,0===s)return i;let d=0,m=0;for(;d<s;)n[d]=e.charCodeAt(c+d),o[d]=++d;for(;m<i;)for(r=t.charCodeAt(c+m),a=m++,l=m,d=0;d<s;d++)u=r===n[d]?a:a+1,a=o[d],l=o[d]=a>l?u>l?l+1:u:u>a?a+1:u;return l};var s=f,i=f;s.default=i;var r=["all","aural","braille","embossed","handheld","print","projection","screen","speech","tty","tv"];return function(o,n){var f=Object.assign({},{offset:0},n);if(f.offset&&!Number.isInteger(f.offset))throw new Error("is-media-descriptor: [THROW_ID_01] opts.offset must be an integer, it was given as ".concat(f.offset," (type ").concat(e(f.offset),")"));if(f.offset||(f.offset=0),"string"!=typeof o)return[];if(!o.trim().length)return[];var i=[],l=0,a=o.length,u=o.trim();if(o!==o.trim()){var c=[];if(!o[0].trim().length)for(var d=0,m=o.length;d<m;d++)if(o[d].trim().length){c.push([0+f.offset,d+f.offset]),l=d;break}if(!o[o.length-1].trim().length)for(var h=o.length;h--;)if(o[h].trim().length){c.push([h+1+f.offset,o.length+f.offset]),a=h+1;break}i.push({idxFrom:c[0][0],idxTo:c[c.length-1][1],message:"Remove whitespace.",fix:{ranges:c}})}if(r.includes(u))return i;if(["only","not"].includes(u))i.push({idxFrom:l+f.offset,idxTo:a+f.offset,message:"Missing media type or condition.",fix:null});else if(!u.match(/^\w+$/g)||u.includes("(")||u.includes(")")){var g=!1,p=t(Array.from(u).reduce((function(e,t,o){return")"===t?(!g&&e[1]+1>e[0]&&(g=!0),[e[0],e[1]+1]):"("===t?[e[0]+1,e[1]]:(";"===t&&i.push({idxFrom:o+f.offset,idxTo:o+1+f.offset,message:"Semicolon found!",fix:null}),e)}),[0,0]),2),x=p[0],y=p[1];if(g&&x===y&&i.push({idxFrom:l+f.offset,idxTo:a+f.offset,message:"Some closing brackets are before their opening counterparts.",fix:null}),x>y?i.push({idxFrom:l+f.offset,idxTo:a+f.offset,message:"More opening brackets than closing.",fix:null}):y>x&&i.push({idxFrom:l+f.offset,idxTo:a+f.offset,message:"More closing brackets than opening.",fix:null}),i.length)return i;!function e(t,o,n){for(var f=null,s=!0,i=[],l=null,a=[],u=0,c=t.length;u<=c;u++){if(")"===t[u]){var d=a.pop();e(t.slice(d+1,u),Object.assign({},o,{offset:o.offset+f}),n)}if("("===t[u]&&a.push(u),t[u]&&t[u].trim().length&&null!==l){if("("===t[l-1]||")"===t[u])n.push({idxFrom:l+o.offset,idxTo:u+o.offset,message:"Bad whitespace.",fix:{ranges:[[l+o.offset,u+o.offset]]}});else if(l<u-1||" "!==t[u-1]){var m=l+o.offset,h=u+o.offset,g=" ";l!==u-1&&(" "===t[l]?(m++,g=null):" "===t[u-1]&&(h--,g=null)),n.push({idxFrom:l+o.offset,idxTo:u+o.offset,message:"Bad whitespace.",fix:{ranges:[g?[m,h," "]:[m,h]]}})}l=null}if(t[u]&&!t[u].trim().length&&null===l&&(l=u),null!==f&&(!t[u]||!t[u].trim().length||"():".includes(t[u]))){var p=t.slice(f,u);if(i.push(p),s)if(["only","not"].includes(p.toLowerCase()))i.length>1&&["only","not"].includes(i[i.length-1])&&n.push({idxFrom:f+o.offset,idxTo:u+o.offset,message:'"'.concat(p,'" instead of a media type.'),fix:null});else if(["and"].includes(p.toLowerCase()))i.length>1&&["only","not"].includes(i[i.length-2])&&n.push({idxFrom:f+o.offset,idxTo:u+o.offset,message:'"'.concat(p,'" instead of a media type.'),fix:null});else{if(!r.includes(p.toLowerCase())){var x=t.slice(f,u),y='Unrecognised "'.concat(x,'".');return x.includes("-")&&(y='Brackets missing around "'.concat(x,'"').concat(":"===t[u]?" and its value":"",".")),x&&x.length&&1===x.length&&(y='Strange symbol "'.concat(x,'".')),void n.push({idxFrom:f+o.offset,idxTo:u+o.offset,message:y,fix:null})}s=!1}else"and"===p?s=!0:n.push({idxFrom:f+o.offset,idxTo:u+o.offset,message:'Unrecognised media type "'.concat(t.slice(f,u),'".'),fix:null});f=null}null===f&&t[u]&&t[u].trim().length&&")"!==t[u]&&("("===t[u]||"("!==t[u]&&(f=u))}}(u,f,i)}else for(var b=0,v=r.length;b<v;b++){if(1===s(r[b],u)){i.push({idxFrom:l+f.offset,idxTo:a+f.offset,message:'Did you mean "'.concat(r[b],'"?'),fix:{ranges:[[l+f.offset,a+f.offset,r[b]]]}});break}b===v-1&&i.push({idxFrom:l+f.offset,idxTo:a+f.offset,message:'Unrecognised media type "'.concat(u,'".'),fix:null})}return i}}));
