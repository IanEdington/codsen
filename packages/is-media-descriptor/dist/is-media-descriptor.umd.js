/**
 * is-media-descriptor
 * Is given string a valid media descriptor (including media query)?
 * Version: 1.1.0
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://gitlab.com/codsen/codsen/tree/master/packages/is-media-descriptor
 */

!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).isMediaDescriptor=t()}(this,(function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var o=[],r=!0,n=!1,f=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(o.push(i.value),!t||o.length!==t);r=!0);}catch(e){n=!0,f=e}finally{try{r||null==s.return||s.return()}finally{if(n)throw f}}return o}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}const o=[],r=[],n=(e,t)=>{if(e===t)return 0;const n=e;e.length>t.length&&(e=t,t=n);let f=e.length,i=t.length;for(;f>0&&e.charCodeAt(~-f)===t.charCodeAt(~-i);)f--,i--;let s,l,a,u,c=0;for(;c<f&&e.charCodeAt(c)===t.charCodeAt(c);)c++;if(f-=c,i-=c,0===f)return i;let d=0,h=0;for(;d<f;)r[d]=e.charCodeAt(c+d),o[d]=++d;for(;h<i;)for(s=t.charCodeAt(c+h),a=h++,l=h,d=0;d<f;d++)u=s===r[d]?a:a+1,a=o[d],l=o[d]=a>l?u>l?l+1:u:u>a?a+1:u;return l};var f=n,i=n;f.default=i;var s=["all","aural","braille","embossed","handheld","print","projection","screen","speech","tty","tv"];return function(o,r){var n=Object.assign({},{offset:0},r);if(n.offset&&!Number.isInteger(n.offset))throw new Error("is-media-descriptor: [THROW_ID_01] opts.offset must be an integer, it was given as ".concat(n.offset," (type ").concat(e(n.offset),")"));if(n.offset||(n.offset=0),"string"!=typeof o)return[];if(!o.trim().length)return[];var i=[],l=0,a=o.length,u=o.trim();if(o!==o.trim()){var c=[];if(!o[0].trim().length)for(var d=0,h=o.length;d<h;d++)if(o[d].trim().length){c.push([0+n.offset,d+n.offset]),l=d;break}if(!o[o.length-1].trim().length)for(var m=o.length;m--;)if(o[m].trim().length){c.push([m+1+n.offset,o.length+n.offset]),a=m+1;break}i.push({idxFrom:c[0][0],idxTo:c[c.length-1][1],message:"Remove whitespace.",fix:{ranges:c}})}if(s.includes(u))return i;if(["only","not"].includes(u))i.push({idxFrom:l+n.offset,idxTo:a+n.offset,message:"Missing media type or condition.",fix:null});else if(!u.match(/^\w+$/g)||u.includes("(")||u.includes(")")){var g=!1,p=t(Array.from(u).reduce((function(e,t){return")"===t?(!g&&e[1]+1>e[0]&&(g=!0),[e[0],e[1]+1]):"("===t?[e[0]+1,e[1]]:e}),[0,0]),2),y=p[0],b=p[1];if(g&&y===b&&i.push({idxFrom:l+n.offset,idxTo:a+n.offset,message:"Some closing brackets are before their opening counterparts.",fix:null}),y>b?i.push({idxFrom:l+n.offset,idxTo:a+n.offset,message:"More opening brackets than closing.",fix:null}):b>y&&i.push({idxFrom:l+n.offset,idxTo:a+n.offset,message:"More closing brackets than opening.",fix:null}),i.length)return i;for(var x=null,v=!0,w=0,A=u.length;w<=A;w++){if(!(null===x||u[w]&&u[w].trim().length)){var T=u.slice(x,w);if(v)if(T.startsWith("("));else if(["only","not"].includes(T.toLowerCase()));else{if(!s.includes(T.toLowerCase())){i.push({idxFrom:x+n.offset,idxTo:w+n.offset,message:'Unrecognised media type "'.concat(u.slice(x,w),'".'),fix:null});break}v=!1}x=null}null===x&&u[w]&&u[w].trim().length&&(x=w)}}else for(var S=0,C=s.length;S<C;S++){if(1===f(s[S],u)){i.push({idxFrom:l+n.offset,idxTo:a+n.offset,message:'Did you mean "'.concat(s[S],'"?'),fix:{ranges:[[l+n.offset,a+n.offset,s[S]]]}});break}S===C-1&&i.push({idxFrom:l+n.offset,idxTo:a+n.offset,message:'Unrecognised media type "'.concat(u,'".'),fix:null})}return i}}));
