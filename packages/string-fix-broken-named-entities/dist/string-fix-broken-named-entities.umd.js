/**
 * string-fix-broken-named-entities
 * Finds and fixes common and not so common broken named HTML entities, returns ranges array of fixes
 * Version: 2.1.6
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://gitlab.com/codsen/codsen/tree/master/packages/string-fix-broken-named-entities
 */

!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(r=r||self).stringFixBrokenNamedEntities=e()}(this,function(){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(e)}function e(r){return function(r){if(Array.isArray(r)){for(var e=0,t=new Array(r.length);e<r.length;e++)t[e]=r[e];return t}}(r)||function(r){if(Symbol.iterator in Object(r)||"[object Arguments]"===Object.prototype.toString.call(r))return Array.from(r)}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var t="[object Object]";var a,o,n=Function.prototype,s=Object.prototype,i=n.toString,l=s.hasOwnProperty,c=i.call(Object),u=s.toString,p=(a=Object.getPrototypeOf,o=Object,function(r){return a(o(r))});var g=function(r){if(!function(r){return!!r&&"object"==typeof r}(r)||u.call(r)!=t||function(r){var e=!1;if(null!=r&&"function"!=typeof r.toString)try{e=!!(r+"")}catch(r){}return e}(r))return!1;var e=p(r);if(null===e)return!0;var a=l.call(e,"constructor")&&e.constructor;return"function"==typeof a&&a instanceof a&&i.call(a)==c},f=function(r,e){if(e){if("object"!=typeof e)throw new TypeError(String(e)+" is not an object. Expected an object that has boolean `includeZero` property.");if("includeZero"in e){if("boolean"!=typeof e.includeZero)throw new TypeError(String(e.includeZero)+" is neither true nor false. `includeZero` option must be a Boolean value.");if(e.includeZero&&0===r)return!0}}return Number.isSafeInteger(r)&&r>=1},d="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function h(r,e){return r(e={exports:{}},e.exports),e.exports}var m=h(function(r,e){(e=r.exports=function(r){return r+e.suffix(+r)}).suffix=function(r){return r%=100,1===Math.floor(r/10)?"th":r%10==1?"st":r%10==2?"nd":r%10==3?"rd":"th"}}),b=(m.suffix,h(function(r,e){var t,a,o,n,s,i,l,c,u,p,g,f,h,m,b,y,w,v,q,E;r.exports=(t="function"==typeof Promise,a="object"==typeof self?self:d,o="undefined"!=typeof Symbol,n="undefined"!=typeof Map,s="undefined"!=typeof Set,i="undefined"!=typeof WeakMap,l="undefined"!=typeof WeakSet,c="undefined"!=typeof DataView,u=o&&void 0!==Symbol.iterator,p=o&&void 0!==Symbol.toStringTag,g=s&&"function"==typeof Set.prototype.entries,f=n&&"function"==typeof Map.prototype.entries,h=g&&Object.getPrototypeOf((new Set).entries()),m=f&&Object.getPrototypeOf((new Map).entries()),b=u&&"function"==typeof Array.prototype[Symbol.iterator],y=b&&Object.getPrototypeOf([][Symbol.iterator]()),w=u&&"function"==typeof String.prototype[Symbol.iterator],v=w&&Object.getPrototypeOf(""[Symbol.iterator]()),q=8,E=-1,function(r){var e=typeof r;if("object"!==e)return e;if(null===r)return"null";if(r===a)return"global";if(Array.isArray(r)&&(!1===p||!(Symbol.toStringTag in r)))return"Array";if("object"==typeof window&&null!==window){if("object"==typeof window.location&&r===window.location)return"Location";if("object"==typeof window.document&&r===window.document)return"Document";if("object"==typeof window.navigator){if("object"==typeof window.navigator.mimeTypes&&r===window.navigator.mimeTypes)return"MimeTypeArray";if("object"==typeof window.navigator.plugins&&r===window.navigator.plugins)return"PluginArray"}if(("function"==typeof window.HTMLElement||"object"==typeof window.HTMLElement)&&r instanceof window.HTMLElement){if("BLOCKQUOTE"===r.tagName)return"HTMLQuoteElement";if("TD"===r.tagName)return"HTMLTableDataCellElement";if("TH"===r.tagName)return"HTMLTableHeaderCellElement"}}var o=p&&r[Symbol.toStringTag];if("string"==typeof o)return o;var u=Object.getPrototypeOf(r);return u===RegExp.prototype?"RegExp":u===Date.prototype?"Date":t&&u===Promise.prototype?"Promise":s&&u===Set.prototype?"Set":n&&u===Map.prototype?"Map":l&&u===WeakSet.prototype?"WeakSet":i&&u===WeakMap.prototype?"WeakMap":c&&u===DataView.prototype?"DataView":n&&u===m?"Map Iterator":s&&u===h?"Set Iterator":b&&u===y?"Array Iterator":w&&u===v?"String Iterator":null===u?"Object":Object.prototype.toString.call(r).slice(q,E)})}));function y(r,e,t){if(e!=e)return function(r,e,t,a){for(var o=r.length,n=t+(a?1:-1);a?n--:++n<o;)if(e(r[n],n,r))return n;return-1}(r,v,t);for(var a=t-1,o=r.length;++a<o;)if(r[a]===e)return a;return-1}function w(r,e,t,a){for(var o=t-1,n=r.length;++o<n;)if(a(r[o],e))return o;return-1}function v(r){return r!=r}var q=Array.prototype.splice;function E(r,e,t,a){var o,n=a?w:y,s=-1,i=e.length,l=r;for(r===e&&(e=function(r,e){var t=-1,a=r.length;e||(e=Array(a));for(;++t<a;)e[t]=r[t];return e}(e)),t&&(l=function(r,e){for(var t=-1,a=r?r.length:0,o=Array(a);++t<a;)o[t]=e(r[t],t,r);return o}(r,(o=t,function(r){return o(r)})));++s<i;)for(var c=0,u=e[s],p=t?t(u):u;(c=n(l,p,c,a))>-1;)l!==r&&q.call(l,c,1),q.call(r,c,1);return r}var S=function(r,e){return r&&r.length&&e&&e.length?E(r,e):r},A=h(function(r,e){var t=200,a="__lodash_hash_undefined__",o=9007199254740991,n="[object Arguments]",s="[object Boolean]",i="[object Date]",l="[object Function]",c="[object GeneratorFunction]",u="[object Map]",p="[object Number]",g="[object Object]",f="[object RegExp]",h="[object Set]",m="[object String]",b="[object Symbol]",y="[object ArrayBuffer]",w="[object DataView]",v="[object Float32Array]",q="[object Float64Array]",E="[object Int8Array]",S="[object Int16Array]",A="[object Int32Array]",D="[object Uint8Array]",L="[object Uint8ClampedArray]",T="[object Uint16Array]",k="[object Uint32Array]",N=/\w*$/,x=/^\[object .+?Constructor\]$/,R=/^(?:0|[1-9]\d*)$/,V={};V[n]=V["[object Array]"]=V[y]=V[w]=V[s]=V[i]=V[v]=V[q]=V[E]=V[S]=V[A]=V[u]=V[p]=V[g]=V[f]=V[h]=V[m]=V[b]=V[D]=V[L]=V[T]=V[k]=!0,V["[object Error]"]=V[l]=V["[object WeakMap]"]=!1;var O="object"==typeof d&&d&&d.Object===Object&&d,j="object"==typeof self&&self&&self.Object===Object&&self,C=O||j||Function("return this")(),_=e&&!e.nodeType&&e,U=_&&r&&!r.nodeType&&r,B=U&&U.exports===_;function I(r,e){return r.set(e[0],e[1]),r}function P(r,e){return r.add(e),r}function H(r,e,t,a){var o=-1,n=r?r.length:0;for(a&&n&&(t=r[++o]);++o<n;)t=e(t,r[o],o,r);return t}function G(r){var e=!1;if(null!=r&&"function"!=typeof r.toString)try{e=!!(r+"")}catch(r){}return e}function F(r){var e=-1,t=Array(r.size);return r.forEach(function(r,a){t[++e]=[a,r]}),t}function $(r,e){return function(t){return r(e(t))}}function M(r){var e=-1,t=Array(r.size);return r.forEach(function(r){t[++e]=r}),t}var z,J=Array.prototype,W=Function.prototype,K=Object.prototype,Z=C["__core-js_shared__"],Y=(z=/[^.]+$/.exec(Z&&Z.keys&&Z.keys.IE_PROTO||""))?"Symbol(src)_1."+z:"",Q=W.toString,X=K.hasOwnProperty,rr=K.toString,er=RegExp("^"+Q.call(X).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),tr=B?C.Buffer:void 0,ar=C.Symbol,or=C.Uint8Array,nr=$(Object.getPrototypeOf,Object),sr=Object.create,ir=K.propertyIsEnumerable,lr=J.splice,cr=Object.getOwnPropertySymbols,ur=tr?tr.isBuffer:void 0,pr=$(Object.keys,Object),gr=Ur(C,"DataView"),fr=Ur(C,"Map"),dr=Ur(C,"Promise"),hr=Ur(C,"Set"),mr=Ur(C,"WeakMap"),br=Ur(Object,"create"),yr=Gr(gr),wr=Gr(fr),vr=Gr(dr),qr=Gr(hr),Er=Gr(mr),Sr=ar?ar.prototype:void 0,Ar=Sr?Sr.valueOf:void 0;function Dr(r){var e=-1,t=r?r.length:0;for(this.clear();++e<t;){var a=r[e];this.set(a[0],a[1])}}function Lr(r){var e=-1,t=r?r.length:0;for(this.clear();++e<t;){var a=r[e];this.set(a[0],a[1])}}function Tr(r){var e=-1,t=r?r.length:0;for(this.clear();++e<t;){var a=r[e];this.set(a[0],a[1])}}function kr(r){this.__data__=new Lr(r)}function Nr(r,e){var t=$r(r)||function(r){return function(r){return function(r){return!!r&&"object"==typeof r}(r)&&Mr(r)}(r)&&X.call(r,"callee")&&(!ir.call(r,"callee")||rr.call(r)==n)}(r)?function(r,e){for(var t=-1,a=Array(r);++t<r;)a[t]=e(t);return a}(r.length,String):[],a=t.length,o=!!a;for(var s in r)!e&&!X.call(r,s)||o&&("length"==s||Pr(s,a))||t.push(s);return t}function xr(r,e,t){var a=r[e];X.call(r,e)&&Fr(a,t)&&(void 0!==t||e in r)||(r[e]=t)}function Rr(r,e){for(var t=r.length;t--;)if(Fr(r[t][0],e))return t;return-1}function Vr(r,e,t,a,o,d,x){var R;if(a&&(R=d?a(r,o,d,x):a(r)),void 0!==R)return R;if(!Wr(r))return r;var O=$r(r);if(O){if(R=function(r){var e=r.length,t=r.constructor(e);e&&"string"==typeof r[0]&&X.call(r,"index")&&(t.index=r.index,t.input=r.input);return t}(r),!e)return function(r,e){var t=-1,a=r.length;e||(e=Array(a));for(;++t<a;)e[t]=r[t];return e}(r,R)}else{var j=Ir(r),C=j==l||j==c;if(zr(r))return function(r,e){if(e)return r.slice();var t=new r.constructor(r.length);return r.copy(t),t}(r,e);if(j==g||j==n||C&&!d){if(G(r))return d?r:{};if(R=function(r){return"function"!=typeof r.constructor||Hr(r)?{}:(e=nr(r),Wr(e)?sr(e):{});var e}(C?{}:r),!e)return function(r,e){return Cr(r,Br(r),e)}(r,function(r,e){return r&&Cr(e,Kr(e),r)}(R,r))}else{if(!V[j])return d?r:{};R=function(r,e,t,a){var o=r.constructor;switch(e){case y:return jr(r);case s:case i:return new o(+r);case w:return function(r,e){var t=e?jr(r.buffer):r.buffer;return new r.constructor(t,r.byteOffset,r.byteLength)}(r,a);case v:case q:case E:case S:case A:case D:case L:case T:case k:return function(r,e){var t=e?jr(r.buffer):r.buffer;return new r.constructor(t,r.byteOffset,r.length)}(r,a);case u:return function(r,e,t){return H(e?t(F(r),!0):F(r),I,new r.constructor)}(r,a,t);case p:case m:return new o(r);case f:return(c=new(l=r).constructor(l.source,N.exec(l))).lastIndex=l.lastIndex,c;case h:return function(r,e,t){return H(e?t(M(r),!0):M(r),P,new r.constructor)}(r,a,t);case b:return n=r,Ar?Object(Ar.call(n)):{}}var n;var l,c}(r,j,Vr,e)}}x||(x=new kr);var _=x.get(r);if(_)return _;if(x.set(r,R),!O)var U=t?function(r){return function(r,e,t){var a=e(r);return $r(r)?a:function(r,e){for(var t=-1,a=e.length,o=r.length;++t<a;)r[o+t]=e[t];return r}(a,t(r))}(r,Kr,Br)}(r):Kr(r);return function(r,e){for(var t=-1,a=r?r.length:0;++t<a&&!1!==e(r[t],t,r););}(U||r,function(o,n){U&&(o=r[n=o]),xr(R,n,Vr(o,e,t,a,n,r,x))}),R}function Or(r){return!(!Wr(r)||(e=r,Y&&Y in e))&&(Jr(r)||G(r)?er:x).test(Gr(r));var e}function jr(r){var e=new r.constructor(r.byteLength);return new or(e).set(new or(r)),e}function Cr(r,e,t,a){t||(t={});for(var o=-1,n=e.length;++o<n;){var s=e[o],i=a?a(t[s],r[s],s,t,r):void 0;xr(t,s,void 0===i?r[s]:i)}return t}function _r(r,e){var t,a,o=r.__data__;return("string"==(a=typeof(t=e))||"number"==a||"symbol"==a||"boolean"==a?"__proto__"!==t:null===t)?o["string"==typeof e?"string":"hash"]:o.map}function Ur(r,e){var t=function(r,e){return null==r?void 0:r[e]}(r,e);return Or(t)?t:void 0}Dr.prototype.clear=function(){this.__data__=br?br(null):{}},Dr.prototype.delete=function(r){return this.has(r)&&delete this.__data__[r]},Dr.prototype.get=function(r){var e=this.__data__;if(br){var t=e[r];return t===a?void 0:t}return X.call(e,r)?e[r]:void 0},Dr.prototype.has=function(r){var e=this.__data__;return br?void 0!==e[r]:X.call(e,r)},Dr.prototype.set=function(r,e){return this.__data__[r]=br&&void 0===e?a:e,this},Lr.prototype.clear=function(){this.__data__=[]},Lr.prototype.delete=function(r){var e=this.__data__,t=Rr(e,r);return!(t<0||(t==e.length-1?e.pop():lr.call(e,t,1),0))},Lr.prototype.get=function(r){var e=this.__data__,t=Rr(e,r);return t<0?void 0:e[t][1]},Lr.prototype.has=function(r){return Rr(this.__data__,r)>-1},Lr.prototype.set=function(r,e){var t=this.__data__,a=Rr(t,r);return a<0?t.push([r,e]):t[a][1]=e,this},Tr.prototype.clear=function(){this.__data__={hash:new Dr,map:new(fr||Lr),string:new Dr}},Tr.prototype.delete=function(r){return _r(this,r).delete(r)},Tr.prototype.get=function(r){return _r(this,r).get(r)},Tr.prototype.has=function(r){return _r(this,r).has(r)},Tr.prototype.set=function(r,e){return _r(this,r).set(r,e),this},kr.prototype.clear=function(){this.__data__=new Lr},kr.prototype.delete=function(r){return this.__data__.delete(r)},kr.prototype.get=function(r){return this.__data__.get(r)},kr.prototype.has=function(r){return this.__data__.has(r)},kr.prototype.set=function(r,e){var a=this.__data__;if(a instanceof Lr){var o=a.__data__;if(!fr||o.length<t-1)return o.push([r,e]),this;a=this.__data__=new Tr(o)}return a.set(r,e),this};var Br=cr?$(cr,Object):function(){return[]},Ir=function(r){return rr.call(r)};function Pr(r,e){return!!(e=null==e?o:e)&&("number"==typeof r||R.test(r))&&r>-1&&r%1==0&&r<e}function Hr(r){var e=r&&r.constructor;return r===("function"==typeof e&&e.prototype||K)}function Gr(r){if(null!=r){try{return Q.call(r)}catch(r){}try{return r+""}catch(r){}}return""}function Fr(r,e){return r===e||r!=r&&e!=e}(gr&&Ir(new gr(new ArrayBuffer(1)))!=w||fr&&Ir(new fr)!=u||dr&&"[object Promise]"!=Ir(dr.resolve())||hr&&Ir(new hr)!=h||mr&&"[object WeakMap]"!=Ir(new mr))&&(Ir=function(r){var e=rr.call(r),t=e==g?r.constructor:void 0,a=t?Gr(t):void 0;if(a)switch(a){case yr:return w;case wr:return u;case vr:return"[object Promise]";case qr:return h;case Er:return"[object WeakMap]"}return e});var $r=Array.isArray;function Mr(r){return null!=r&&function(r){return"number"==typeof r&&r>-1&&r%1==0&&r<=o}(r.length)&&!Jr(r)}var zr=ur||function(){return!1};function Jr(r){var e=Wr(r)?rr.call(r):"";return e==l||e==c}function Wr(r){var e=typeof r;return!!r&&("object"==e||"function"==e)}function Kr(r){return Mr(r)?Nr(r):function(r){if(!Hr(r))return pr(r);var e=[];for(var t in Object(r))X.call(r,t)&&"constructor"!=t&&e.push(t);return e}(r)}r.exports=function(r){return Vr(r,!0,!0)}});const D=Array.isArray;function L(r){return"string"==typeof r&&r.length>0&&"."===r[0]?r.slice(1):r}function T(r,e){return function r(e,t,a){const o=A(e);let n,s,i,l,c;if((a=Object.assign({depth:-1,path:""},a)).depth+=1,D(o))for(n=0,s=o.length;n<s;n++){const e=`${a.path}.${n}`;void 0!==o[n]?(a.parent=A(o),a.parentType="array",i=r(t(o[n],void 0,Object.assign({},a,{path:L(e)})),t,Object.assign({},a,{path:L(e)})),Number.isNaN(i)&&n<o.length?(o.splice(n,1),n-=1):o[n]=i):o.splice(n,1)}else if(g(o))for(n=0,s=(l=Object.keys(o)).length;n<s;n++){c=l[n];const e=`${a.path}.${c}`;0===a.depth&&null!=c&&(a.topmostKey=c),a.parent=A(o),a.parentType="object",i=r(t(c,o[c],Object.assign({},a,{path:L(e)})),t,Object.assign({},a,{path:L(e)})),Number.isNaN(i)?delete o[c]:o[c]=i}return o}(r,e,{})}var k="__lodash_hash_undefined__",N=9007199254740991,x="[object Function]",R="[object GeneratorFunction]",V=/^\[object .+?Constructor\]$/,O="object"==typeof d&&d&&d.Object===Object&&d,j="object"==typeof self&&self&&self.Object===Object&&self,C=O||j||Function("return this")();function _(r,e){return!!(r?r.length:0)&&function(r,e,t){if(e!=e)return function(r,e,t,a){var o=r.length,n=t+(a?1:-1);for(;a?n--:++n<o;)if(e(r[n],n,r))return n;return-1}(r,I,t);var a=t-1,o=r.length;for(;++a<o;)if(r[a]===e)return a;return-1}(r,e,0)>-1}function U(r,e,t){for(var a=-1,o=r?r.length:0;++a<o;)if(t(e,r[a]))return!0;return!1}function B(r,e){for(var t=-1,a=r?r.length:0,o=Array(a);++t<a;)o[t]=e(r[t],t,r);return o}function I(r){return r!=r}function P(r){return function(e){return r(e)}}function H(r,e){return r.has(e)}var G,F=Array.prototype,$=Function.prototype,M=Object.prototype,z=C["__core-js_shared__"],J=(G=/[^.]+$/.exec(z&&z.keys&&z.keys.IE_PROTO||""))?"Symbol(src)_1."+G:"",W=$.toString,K=M.hasOwnProperty,Z=M.toString,Y=RegExp("^"+W.call(K).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Q=F.splice,X=Math.max,rr=Math.min,er=pr(C,"Map"),tr=pr(Object,"create");function ar(r){var e=-1,t=r?r.length:0;for(this.clear();++e<t;){var a=r[e];this.set(a[0],a[1])}}function or(r){var e=-1,t=r?r.length:0;for(this.clear();++e<t;){var a=r[e];this.set(a[0],a[1])}}function nr(r){var e=-1,t=r?r.length:0;for(this.clear();++e<t;){var a=r[e];this.set(a[0],a[1])}}function sr(r){var e=-1,t=r?r.length:0;for(this.__data__=new nr;++e<t;)this.add(r[e])}function ir(r,e){for(var t,a,o=r.length;o--;)if((t=r[o][0])===(a=e)||t!=t&&a!=a)return o;return-1}function lr(r){return!(!fr(r)||(e=r,J&&J in e))&&(gr(r)||function(r){var e=!1;if(null!=r&&"function"!=typeof r.toString)try{e=!!(r+"")}catch(r){}return e}(r)?Y:V).test(function(r){if(null!=r){try{return W.call(r)}catch(r){}try{return r+""}catch(r){}}return""}(r));var e}function cr(r){return function(r){return function(r){return!!r&&"object"==typeof r}(r)&&function(r){return null!=r&&function(r){return"number"==typeof r&&r>-1&&r%1==0&&r<=N}(r.length)&&!gr(r)}(r)}(r)?r:[]}function ur(r,e){var t,a,o=r.__data__;return("string"==(a=typeof(t=e))||"number"==a||"symbol"==a||"boolean"==a?"__proto__"!==t:null===t)?o["string"==typeof e?"string":"hash"]:o.map}function pr(r,e){var t=function(r,e){return null==r?void 0:r[e]}(r,e);return lr(t)?t:void 0}function gr(r){var e=fr(r)?Z.call(r):"";return e==x||e==R}function fr(r){var e=typeof r;return!!r&&("object"==e||"function"==e)}ar.prototype.clear=function(){this.__data__=tr?tr(null):{}},ar.prototype.delete=function(r){return this.has(r)&&delete this.__data__[r]},ar.prototype.get=function(r){var e=this.__data__;if(tr){var t=e[r];return t===k?void 0:t}return K.call(e,r)?e[r]:void 0},ar.prototype.has=function(r){var e=this.__data__;return tr?void 0!==e[r]:K.call(e,r)},ar.prototype.set=function(r,e){return this.__data__[r]=tr&&void 0===e?k:e,this},or.prototype.clear=function(){this.__data__=[]},or.prototype.delete=function(r){var e=this.__data__,t=ir(e,r);return!(t<0||(t==e.length-1?e.pop():Q.call(e,t,1),0))},or.prototype.get=function(r){var e=this.__data__,t=ir(e,r);return t<0?void 0:e[t][1]},or.prototype.has=function(r){return ir(this.__data__,r)>-1},or.prototype.set=function(r,e){var t=this.__data__,a=ir(t,r);return a<0?t.push([r,e]):t[a][1]=e,this},nr.prototype.clear=function(){this.__data__={hash:new ar,map:new(er||or),string:new ar}},nr.prototype.delete=function(r){return ur(this,r).delete(r)},nr.prototype.get=function(r){return ur(this,r).get(r)},nr.prototype.has=function(r){return ur(this,r).has(r)},nr.prototype.set=function(r,e){return ur(this,r).set(r,e),this},sr.prototype.add=sr.prototype.push=function(r){return this.__data__.set(r,k),this},sr.prototype.has=function(r){return this.__data__.has(r)};var dr=function(r,e){return e=X(void 0===e?r.length-1:e,0),function(){for(var t=arguments,a=-1,o=X(t.length-e,0),n=Array(o);++a<o;)n[a]=t[e+a];a=-1;for(var s=Array(e+1);++a<e;)s[a]=t[a];return s[e]=n,function(r,e,t){switch(t.length){case 0:return r.call(e);case 1:return r.call(e,t[0]);case 2:return r.call(e,t[0],t[1]);case 3:return r.call(e,t[0],t[1],t[2])}return r.apply(e,t)}(r,this,s)}}(function(r){var e=B(r,cr);return e.length&&e[0]===r[0]?function(r,e,t){for(var a=t?U:_,o=r[0].length,n=r.length,s=n,i=Array(n),l=1/0,c=[];s--;){var u=r[s];s&&e&&(u=B(u,P(e))),l=rr(u.length,l),i[s]=!t&&(e||o>=120&&u.length>=120)?new sr(s&&u):void 0}u=r[0];var p=-1,g=i[0];r:for(;++p<o&&c.length<l;){var f=u[p],d=e?e(f):f;if(f=t||0!==f?f:0,!(g?H(g,d):a(c,d,t))){for(s=n;--s;){var h=i[s];if(!(h?H(h,d):a(r[s],d,t)))continue r}g&&g.push(d),c.push(f)}}return c}(e):[]});function hr(r){return"string"==typeof r?r.length>0?[r]:[]:r}var mr=h(function(r){r.exports=function(){var r=Object.prototype.toString;function e(r,e){return null!=r&&Object.prototype.hasOwnProperty.call(r,e)}function t(r){if(!r)return!0;if(o(r)&&0===r.length)return!0;if("string"!=typeof r){for(var t in r)if(e(r,t))return!1;return!0}return!1}function a(e){return r.call(e)}var o=Array.isArray||function(e){return"[object Array]"===r.call(e)};function n(r){var e=parseInt(r);return e.toString()===r?e:r}function s(r){r=r||{};var s=function(r){return Object.keys(s).reduce(function(e,t){return"create"===t?e:("function"==typeof s[t]&&(e[t]=s[t].bind(s,r)),e)},{})};function i(t,a){return r.includeInheritedProps||"number"==typeof a&&Array.isArray(t)||e(t,a)}function l(r,e){if(i(r,e))return r[e]}function c(r,e,t,a){if("number"==typeof e&&(e=[e]),!e||0===e.length)return r;if("string"==typeof e)return c(r,e.split(".").map(n),t,a);var o=e[0],s=l(r,o);return 1===e.length?(void 0!==s&&a||(r[o]=t),s):(void 0===s&&("number"==typeof e[1]?r[o]=[]:r[o]={}),c(r[o],e.slice(1),t,a))}return s.has=function(t,a){if("number"==typeof a?a=[a]:"string"==typeof a&&(a=a.split(".")),!a||0===a.length)return!!t;for(var s=0;s<a.length;s++){var i=n(a[s]);if(!("number"==typeof i&&o(t)&&i<t.length||(r.includeInheritedProps?i in Object(t):e(t,i))))return!1;t=t[i]}return!0},s.ensureExists=function(r,e,t){return c(r,e,t,!0)},s.set=function(r,e,t,a){return c(r,e,t,a)},s.insert=function(r,e,t,a){var n=s.get(r,e);a=~~a,o(n)||(n=[],s.set(r,e,n)),n.splice(a,0,t)},s.empty=function(r,e){var n,l;if(!t(e)&&null!=r&&(n=s.get(r,e))){if("string"==typeof n)return s.set(r,e,"");if(function(r){return"boolean"==typeof r||"[object Boolean]"===a(r)}(n))return s.set(r,e,!1);if("number"==typeof n)return s.set(r,e,0);if(o(n))n.length=0;else{if(!function(r){return"object"==typeof r&&"[object Object]"===a(r)}(n))return s.set(r,e,null);for(l in n)i(n,l)&&delete n[l]}}},s.push=function(r,e){var t=s.get(r,e);o(t)||(t=[],s.set(r,e,t)),t.push.apply(t,Array.prototype.slice.call(arguments,2))},s.coalesce=function(r,e,t){for(var a,o=0,n=e.length;o<n;o++)if(void 0!==(a=s.get(r,e[o])))return a;return t},s.get=function(r,e,t){if("number"==typeof e&&(e=[e]),!e||0===e.length)return r;if(null==r)return t;if("string"==typeof e)return s.get(r,e.split("."),t);var a=n(e[0]),o=l(r,a);return void 0===o?t:1===e.length?o:s.get(r[a],e.slice(1),t)},s.del=function(r,e){if("number"==typeof e&&(e=[e]),null==r)return r;if(t(e))return r;if("string"==typeof e)return s.del(r,e.split("."));var a=n(e[0]);return i(r,a)?1!==e.length?s.del(r[a],e.slice(1)):(o(r)?r.splice(a,1):delete r[a],r):r},s}var i=s();return i.create=s,i.withInheritedProps=s({includeInheritedProps:!0}),i}()}),br=function(r){var e=r%100;if(e>=10&&e<=20)return"th";var t=r%10;return 1===t?"st":2===t?"nd":3===t?"rd":"th"};function yr(r){if("number"!=typeof r)throw new TypeError("Expected Number, got "+typeof r+" "+r);return r+br(r)}yr.indicator=br;var wr=yr,vr=/[|\\{}()[\]^$+*?.]/g,qr=function(r){if("string"!=typeof r)throw new TypeError("Expected a string");return r.replace(vr,"\\$&")};const Er=new Map;function Sr(r,e){const t=Object.assign({caseSensitive:!1},e),a=r+JSON.stringify(t);if(Er.has(a))return Er.get(a);const o="!"===r[0];o&&(r=r.slice(1)),r=qr(r).replace(/\\\*/g,".*");const n=new RegExp(`^${r}$`,t.caseSensitive?"":"i");return n.negated=o,Er.set(a,n),n}var Ar=(r,e,t)=>{if(!Array.isArray(r)||!Array.isArray(e))throw new TypeError(`Expected two arrays, got ${typeof r} ${typeof e}`);if(0===e.length)return r;const a="!"===e[0][0];e=e.map(r=>Sr(r,t));const o=[];for(const t of r){let r=a;for(const a of e)a.test(t)&&(r=!a.negated);r&&o.push(t)}return o};function Dr(r,e,t){return function r(e,t,a,o=!0){const n=Object.prototype.hasOwnProperty;function s(r){return null!=r}function i(r){return"Object"===b(r)}function l(r,e){return e=hr(e),Array.from(r).filter(r=>!e.some(e=>Ar.isMatch(r,e,{caseSensitive:!0})))}const c=["any","anything","every","everything","all","whatever","whatevs"],u=Array.isArray;if(!s(e))throw new Error("check-types-mini: [THROW_ID_01] First argument is missing!");const p={ignoreKeys:[],ignorePaths:[],acceptArrays:!1,acceptArraysIgnore:[],enforceStrictKeyset:!0,schema:{},msg:"check-types-mini",optsVarName:"opts"};let g;if(g=s(a)&&i(a)?Object.assign({},p,a):Object.assign({},p),s(g.ignoreKeys)&&g.ignoreKeys?g.ignoreKeys=hr(g.ignoreKeys):g.ignoreKeys=[],s(g.ignorePaths)&&g.ignorePaths?g.ignorePaths=hr(g.ignorePaths):g.ignorePaths=[],s(g.acceptArraysIgnore)&&g.acceptArraysIgnore?g.acceptArraysIgnore=hr(g.acceptArraysIgnore):g.acceptArraysIgnore=[],g.msg="string"==typeof g.msg?g.msg.trim():g.msg,":"===g.msg[g.msg.length-1]&&(g.msg=g.msg.slice(0,g.msg.length-1).trim()),g.schema&&(Object.keys(g.schema).forEach(r=>{if(i(g.schema[r])){const e={};T(g.schema[r],(t,a,o)=>{const n=void 0!==a?a:t;return u(n)||i(n)||(e[`${r}.${o.path}`]=n),n}),delete g.schema[r],g.schema=Object.assign(g.schema,e)}}),Object.keys(g.schema).forEach(r=>{u(g.schema[r])||(g.schema[r]=[g.schema[r]]),g.schema[r]=g.schema[r].map(String).map(r=>r.toLowerCase()).map(r=>r.trim())})),s(t)||(t={}),o&&r(g,p,{enforceStrictKeyset:!1},!1),g.enforceStrictKeyset)if(s(g.schema)&&Object.keys(g.schema).length>0){if(0!==l(S(Object.keys(e),Object.keys(t).concat(Object.keys(g.schema))),g.ignoreKeys).length){const r=S(Object.keys(e),Object.keys(t).concat(Object.keys(g.schema)));throw new TypeError(`${g.msg}: ${g.optsVarName}.enforceStrictKeyset is on and the following key${r.length>1?"s":""} ${r.length>1?"are":"is"} not covered by schema and/or reference objects: ${r.join(", ")}`)}}else{if(!(s(t)&&Object.keys(t).length>0))throw new TypeError(`${g.msg}: Both ${g.optsVarName}.schema and reference objects are missing! We don't have anything to match the keys as you requested via opts.enforceStrictKeyset!`);if(0!==l(S(Object.keys(e),Object.keys(t)),g.ignoreKeys).length){const r=S(Object.keys(e),Object.keys(t));throw new TypeError(`${g.msg}: The input object has key${r.length>1?"s":""} which ${r.length>1?"are":"is"} not covered by the reference object: ${r.join(", ")}`)}if(0!==l(S(Object.keys(t),Object.keys(e)),g.ignoreKeys).length){const r=S(Object.keys(t),Object.keys(e));throw new TypeError(`${g.msg}: The reference object has key${r.length>1?"s":""} which ${r.length>1?"are":"is"} not present in the input object: ${r.join(", ")}`)}}const f=[];T(e,(r,a,o)=>{let s=a,l=r;if("array"===o.parentType&&(l=void 0,s=r),u(f)&&f.length&&f.some(r=>o.path.startsWith(r)))return s;if(l&&g.ignoreKeys.some(r=>Ar.isMatch(l,r)))return s;if(g.ignorePaths.some(r=>Ar.isMatch(o.path,r)))return s;const p=!(!i(s)&&!u(s)&&u(o.parent));let d=!1;i(g.schema)&&n.call(g.schema,mr.get(o.path))&&(d=!0);let h=!1;if(i(t)&&mr.has(t,mr.get(o.path))&&(h=!0),g.enforceStrictKeyset&&p&&!d&&!h)throw new TypeError(`${g.msg}: ${g.optsVarName}.${o.path} is neither covered by reference object (second input argument), nor ${g.optsVarName}.schema! To stop this error, turn off ${g.optsVarName}.enforceStrictKeyset or provide some type reference (2nd argument or ${g.optsVarName}.schema).\n\nDebug info:\n\nobj = ${JSON.stringify(e,null,4)}\n\nref = ${JSON.stringify(t,null,4)}\n\ninnerObj = ${JSON.stringify(o,null,4)}\n\nopts = ${JSON.stringify(g,null,4)}\n\ncurrent = ${JSON.stringify(s,null,4)}\n\n`);if(d){const r=hr(g.schema[o.path]).map(String).map(r=>r.toLowerCase());if(mr.set(g.schema,o.path,r),dr(r,c).length)f.push(o.path);else if(!0!==s&&!1!==s&&!r.includes(b(s).toLowerCase())||(!0===s||!1===s)&&!r.includes(String(s))&&!r.includes("boolean")){if(!u(s)||!g.acceptArrays)throw new TypeError(`${g.msg}: ${g.optsVarName}.${o.path} was customised to ${"string"!==b(s)?'"':""}${JSON.stringify(s,null,0)}${"string"!==b(s)?'"':""} (type: ${b(s).toLowerCase()}) which is not among the allowed types in schema (which is equal to ${JSON.stringify(r,null,0)})`);for(let e=0,t=s.length;e<t;e++)if(!r.includes(b(s[e]).toLowerCase()))throw new TypeError(`${g.msg}: ${g.optsVarName}.${o.path}.${e}, the ${wr(e+1)} element (equal to ${JSON.stringify(s[e],null,0)}) is of a type ${b(s[e]).toLowerCase()}, but only the following are allowed by the ${g.optsVarName}.schema: ${r.join(", ")}`)}}else if(h){const e=mr.get(t,o.path);if(g.acceptArrays&&u(s)&&!g.acceptArraysIgnore.includes(r)){if(!s.every(e=>b(e).toLowerCase()===b(t[r]).toLowerCase()))throw new TypeError(`${g.msg}: ${g.optsVarName}.${o.path} was customised to be array, but not all of its elements are ${b(t[r]).toLowerCase()}-type`)}else if(b(s)!==b(e))throw new TypeError(`${g.msg}: ${g.optsVarName}.${o.path} was customised to ${"string"===b(s).toLowerCase()?"":'"'}${JSON.stringify(s,null,0)}${"string"===b(s).toLowerCase()?"":'"'} which is not ${b(e).toLowerCase()} but ${b(s).toLowerCase()}`)}return s})}(r,e,t)}Ar.isMatch=((r,e,t)=>{const a=Sr(e,t),o=a.test(r);return a.negated?!o:o});const Lr=Array.isArray;function Tr(r,e){if(!Lr(r))throw new TypeError(`ranges-sort: [THROW_ID_01] Input must be an array, consisting of range arrays! Currently its type is: ${typeof r}, equal to: ${JSON.stringify(r,null,4)}`);if(0===r.length)return r;const t={strictlyTwoElementsInRangeArrays:!1,progressFn:null},a=Object.assign({},t,e);let o,n;if(Dr(a,t,{msg:"ranges-sort: [THROW_ID_02*]",schema:{progressFn:["function","false","null"]}}),a.strictlyTwoElementsInRangeArrays&&!r.every((r,e)=>2===r.length||(o=e,n=r.length,!1)))throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${m(o)} range (${JSON.stringify(r[o],null,4)}) has not two but ${n} elements!`);if(!r.every((r,e)=>!(!f(r[0],{includeZero:!0})||!f(r[1],{includeZero:!0}))||(o=e,!1)))throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${m(o)} range (${JSON.stringify(r[o],null,4)}) does not consist of only natural numbers!`);const s=r.length*r.length;let i=0;return Array.from(r).sort((r,e)=>(a.progressFn&&(i++,a.progressFn(Math.floor(100*i/s))),r[0]===e[0]?r[1]<e[1]?-1:r[1]>e[1]?1:0:r[0]<e[0]?-1:1))}var kr={Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",AMP:"&",amp:"&",And:"⩓",and:"∧",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",ap:"≈",apacir:"⩯",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",Barwed:"⌆",barwed:"⌅",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",Because:"∵",because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxDL:"╗",boxDl:"╖",boxdL:"╕",boxdl:"┐",boxDR:"╔",boxDr:"╓",boxdR:"╒",boxdr:"┌",boxH:"═",boxh:"─",boxHD:"╦",boxHd:"╤",boxhD:"╥",boxhd:"┬",boxHU:"╩",boxHu:"╧",boxhU:"╨",boxhu:"┴",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxUL:"╝",boxUl:"╜",boxuL:"╛",boxul:"┘",boxUR:"╚",boxUr:"╙",boxuR:"╘",boxur:"└",boxV:"║",boxv:"│",boxVH:"╬",boxVh:"╫",boxvH:"╪",boxvh:"┼",boxVL:"╣",boxVl:"╢",boxvL:"╡",boxvl:"┤",boxVR:"╠",boxVr:"╟",boxvR:"╞",boxvr:"├",bprime:"‵",Breve:"˘",breve:"˘",brvbar:"¦",Bscr:"ℬ",bscr:"𝒷",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",Cap:"⋒",cap:"∩",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",CenterDot:"·",centerdot:"·",Cfr:"ℭ",cfr:"𝔠",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",Colon:"∷",colon:":",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",Conint:"∯",conint:"∮",ContourIntegral:"∮",Copf:"ℂ",copf:"𝕔",coprod:"∐",Coproduct:"∐",COPY:"©",copy:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",Cross:"⨯",cross:"✗",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",Cup:"⋓",cup:"∪",cupbrcap:"⩈",CupCap:"≍",cupcap:"⩆",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",Dagger:"‡",dagger:"†",daleth:"ℸ",Darr:"↡",dArr:"⇓",darr:"↓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",DD:"ⅅ",dd:"ⅆ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",Diamond:"⋄",diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrow:"↓",Downarrow:"⇓",downarrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",ecir:"≖",Ecirc:"Ê",ecirc:"ê",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",eDot:"≑",edot:"ė",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",Escr:"ℰ",escr:"ℯ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",ExponentialE:"ⅇ",exponentiale:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",ForAll:"∀",forall:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",Fscr:"ℱ",fscr:"𝒻",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",gE:"≧",ge:"≥",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",Gg:"⋙",gg:"≫",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gnE:"≩",gne:"⪈",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",GT:">",Gt:"≫",gt:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",hArr:"⇔",harr:"↔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",Hfr:"ℌ",hfr:"𝔥",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",Hopf:"ℍ",hopf:"𝕙",horbar:"―",HorizontalLine:"─",Hscr:"ℋ",hscr:"𝒽",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",Ifr:"ℑ",ifr:"𝔦",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Im:"ℑ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",Int:"∬",int:"∫",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",Iscr:"ℐ",iscr:"𝒾",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",Lang:"⟪",lang:"⟨",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",Larr:"↞",lArr:"⇐",larr:"←",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",lAtail:"⤛",latail:"⤙",late:"⪭",lates:"⪭︀",lBarr:"⤎",lbarr:"⤌",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",lE:"≦",le:"≤",LeftAngleBracket:"⟨",LeftArrow:"←",Leftarrow:"⇐",leftarrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",Ll:"⋘",ll:"≪",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lnE:"≨",lne:"⪇",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftarrow:"⟵",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longleftrightarrow:"⟷",longmapsto:"⟼",LongRightArrow:"⟶",Longrightarrow:"⟹",longrightarrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",Lscr:"ℒ",lscr:"𝓁",Lsh:"↰",lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",LT:"<",Lt:"≪",lt:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",Mscr:"ℳ",mscr:"𝓂",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",ne:"≠",nearhk:"⤤",neArr:"⇗",nearr:"↗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nhArr:"⇎",nharr:"↮",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlArr:"⇍",nlarr:"↚",nldr:"‥",nlE:"≦̸",nle:"≰",nLeftarrow:"⇍",nleftarrow:"↚",nLeftrightarrow:"⇎",nleftrightarrow:"↮",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",Nopf:"ℕ",nopf:"𝕟",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrArr:"⇏",nrarr:"↛",nrarrc:"⤳̸",nrarrw:"↝̸",nRightarrow:"⇏",nrightarrow:"↛",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nVDash:"⊯",nVdash:"⊮",nvDash:"⊭",nvdash:"⊬",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwArr:"⇖",nwarr:"↖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",ocir:"⊚",Ocirc:"Ô",ocirc:"ô",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",Or:"⩔",or:"∨",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",Otimes:"⨷",otimes:"⊗",otimesas:"⨶",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",Popf:"ℙ",popf:"𝕡",pound:"£",Pr:"⪻",pr:"≺",prap:"⪷",prcue:"≼",prE:"⪳",pre:"⪯",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",Prime:"″",prime:"′",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",Qopf:"ℚ",qopf:"𝕢",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",QUOT:'"',quot:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",Rang:"⟫",rang:"⟩",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",Rarr:"↠",rArr:"⇒",rarr:"→",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",rAtail:"⤜",ratail:"⤚",ratio:"∶",rationals:"ℚ",RBarr:"⤐",rBarr:"⤏",rbarr:"⤍",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",REG:"®",reg:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",Rfr:"ℜ",rfr:"𝔯",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrow:"→",Rightarrow:"⇒",rightarrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",Ropf:"ℝ",ropf:"𝕣",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",Rscr:"ℛ",rscr:"𝓇",Rsh:"↱",rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",Sc:"⪼",sc:"≻",scap:"⪸",Scaron:"Š",scaron:"š",sccue:"≽",scE:"⪴",sce:"⪰",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",seArr:"⇘",searr:"↘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",sol:"/",solb:"⧄",solbar:"⌿",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",Square:"□",square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",Sub:"⋐",sub:"⊂",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",Subset:"⋐",subset:"⊂",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",Sum:"∑",sum:"∑",sung:"♪",Sup:"⋑",sup:"⊃",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",Supset:"⋑",supset:"⊃",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swArr:"⇙",swarr:"↙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",Therefore:"∴",therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",Tilde:"∼",tilde:"˜",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",TRADE:"™",trade:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",Uarr:"↟",uArr:"⇑",uarr:"↑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrow:"↑",Uparrow:"⇑",uparrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",UpDownArrow:"↕",Updownarrow:"⇕",updownarrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",Upsi:"ϒ",upsi:"υ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",vArr:"⇕",varr:"↕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",Vbar:"⫫",vBar:"⫨",vBarv:"⫩",Vcy:"В",vcy:"в",VDash:"⊫",Vdash:"⊩",vDash:"⊨",vdash:"⊢",Vdashl:"⫦",Vee:"⋁",vee:"∨",veebar:"⊻",veeeq:"≚",vellip:"⋮",Verbar:"‖",verbar:"|",Vert:"‖",vert:"|",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",Wedge:"⋀",wedge:"∧",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xhArr:"⟺",xharr:"⟷",Xi:"Ξ",xi:"ξ",xlArr:"⟸",xlarr:"⟵",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrArr:"⟹",xrarr:"⟶",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",Yuml:"Ÿ",yuml:"ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",Zfr:"ℨ",zfr:"𝔷",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",Zopf:"ℤ",zopf:"𝕫",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"},Nr={A:{a:["Aacute"],b:["Abreve"],c:["Acirc","Acy"],E:["AElig"],f:["Afr"],g:["Agrave"],l:["Alpha"],m:["Amacr"],M:["AMP"],n:["And"],o:["Aogon","Aopf"],p:["ApplyFunction"],r:["Aring"],s:["Ascr","Assign"],t:["Atilde"],u:["Auml"]},a:{a:["aacute"],b:["abreve"],c:["ac","acd","acE","acirc","acute","acy"],e:["aelig"],f:["af","afr"],g:["agrave"],l:["alefsym","aleph","alpha"],m:["amacr","amalg","amp"],n:["and","andand","andd","andslope","andv","ang","ange","angle","angmsd","angmsdaa","angmsdab","angmsdac","angmsdad","angmsdae","angmsdaf","angmsdag","angmsdah","angrt","angrtvb","angrtvbd","angsph","angst","angzarr"],o:["aogon","aopf"],p:["ap","apacir","apE","ape","apid","apos","approx","approxeq"],r:["aring"],s:["ascr","ast","asymp","asympeq"],t:["atilde"],u:["auml"],w:["awconint","awint"]},b:{a:["backcong","backepsilon","backprime","backsim","backsimeq","barvee","barwed","barwedge"],b:["bbrk","bbrktbrk"],c:["bcong","bcy"],d:["bdquo"],e:["becaus","because","bemptyv","bepsi","bernou","beta","beth","between"],f:["bfr"],i:["bigcap","bigcirc","bigcup","bigodot","bigoplus","bigotimes","bigsqcup","bigstar","bigtriangledown","bigtriangleup","biguplus","bigvee","bigwedge"],k:["bkarow"],l:["blacklozenge","blacksquare","blacktriangle","blacktriangledown","blacktriangleleft","blacktriangleright","blank","blk12","blk14","blk34","block"],n:["bne","bnequiv","bnot"],N:["bNot"],o:["bopf","bot","bottom","bowtie","boxbox","boxDL","boxDl","boxdL","boxdl","boxDR","boxDr","boxdR","boxdr","boxH","boxh","boxHD","boxHd","boxhD","boxhd","boxHU","boxHu","boxhU","boxhu","boxminus","boxplus","boxtimes","boxUL","boxUl","boxuL","boxul","boxUR","boxUr","boxuR","boxur","boxV","boxv","boxVH","boxVh","boxvH","boxvh","boxVL","boxVl","boxvL","boxvl","boxVR","boxVr","boxvR","boxvr"],p:["bprime"],r:["breve","brvbar"],s:["bscr","bsemi","bsim","bsime","bsol","bsolb","bsolhsub"],u:["bull","bullet","bump","bumpE","bumpe","bumpeq"]},B:{a:["Backslash","Barv","Barwed"],c:["Bcy"],e:["Because","Bernoullis","Beta"],f:["Bfr"],o:["Bopf"],r:["Breve"],s:["Bscr"],u:["Bumpeq"]},C:{a:["Cacute","Cap","CapitalDifferentialD","Cayleys"],c:["Ccaron","Ccedil","Ccirc","Cconint"],d:["Cdot"],e:["Cedilla","CenterDot"],f:["Cfr"],H:["CHcy"],h:["Chi"],i:["CircleDot","CircleMinus","CirclePlus","CircleTimes"],l:["ClockwiseContourIntegral","CloseCurlyDoubleQuote","CloseCurlyQuote"],o:["Colon","Colone","Congruent","Conint","ContourIntegral","Copf","Coproduct","CounterClockwiseContourIntegral"],O:["COPY"],r:["Cross"],s:["Cscr"],u:["Cup","CupCap"]},c:{a:["cacute","cap","capand","capbrcup","capcap","capcup","capdot","caps","caret","caron"],c:["ccaps","ccaron","ccedil","ccirc","ccups","ccupssm"],d:["cdot"],e:["cedil","cemptyv","cent","centerdot"],f:["cfr"],h:["chcy","check","checkmark","chi"],i:["cir","circ","circeq","circlearrowleft","circlearrowright","circledast","circledcirc","circleddash","circledR","circledS","cirE","cire","cirfnint","cirmid","cirscir"],l:["clubs","clubsuit"],o:["colon","colone","coloneq","comma","commat","comp","compfn","complement","complexes","cong","congdot","conint","copf","coprod","copy","copysr"],r:["crarr","cross"],s:["cscr","csub","csube","csup","csupe"],t:["ctdot"],u:["cudarrl","cudarrr","cuepr","cuesc","cularr","cularrp","cup","cupbrcap","cupcap","cupcup","cupdot","cupor","cups","curarr","curarrm","curlyeqprec","curlyeqsucc","curlyvee","curlywedge","curren","curvearrowleft","curvearrowright","cuvee","cuwed"],w:["cwconint","cwint"],y:["cylcty"]},D:{a:["Dagger","Darr","Dashv"],c:["Dcaron","Dcy"],D:["DD","DDotrahd"],e:["Del","Delta"],f:["Dfr"],i:["DiacriticalAcute","DiacriticalDot","DiacriticalDoubleAcute","DiacriticalGrave","DiacriticalTilde","Diamond","DifferentialD"],J:["DJcy"],o:["Dopf","Dot","DotDot","DotEqual","DoubleContourIntegral","DoubleDot","DoubleDownArrow","DoubleLeftArrow","DoubleLeftRightArrow","DoubleLeftTee","DoubleLongLeftArrow","DoubleLongLeftRightArrow","DoubleLongRightArrow","DoubleRightArrow","DoubleRightTee","DoubleUpArrow","DoubleUpDownArrow","DoubleVerticalBar","DownArrow","Downarrow","DownArrowBar","DownArrowUpArrow","DownBreve","DownLeftRightVector","DownLeftTeeVector","DownLeftVector","DownLeftVectorBar","DownRightTeeVector","DownRightVector","DownRightVectorBar","DownTee","DownTeeArrow"],s:["Dscr","Dstrok"],S:["DScy"],Z:["DZcy"]},d:{a:["dagger","daleth","darr","dash","dashv"],A:["dArr"],b:["dbkarow","dblac"],c:["dcaron","dcy"],d:["dd","ddagger","ddarr","ddotseq"],e:["deg","delta","demptyv"],f:["dfisht","dfr"],H:["dHar"],h:["dharl","dharr"],i:["diam","diamond","diamondsuit","diams","die","digamma","disin","div","divide","divideontimes","divonx"],j:["djcy"],l:["dlcorn","dlcrop"],o:["dollar","dopf","dot","doteq","doteqdot","dotminus","dotplus","dotsquare","doublebarwedge","downarrow","downdownarrows","downharpoonleft","downharpoonright"],r:["drbkarow","drcorn","drcrop"],s:["dscr","dscy","dsol","dstrok"],t:["dtdot","dtri","dtrif"],u:["duarr","duhar"],w:["dwangle"],z:["dzcy","dzigrarr"]},E:{a:["Eacute"],c:["Ecaron","Ecirc","Ecy"],d:["Edot"],f:["Efr"],g:["Egrave"],l:["Element"],m:["Emacr","EmptySmallSquare","EmptyVerySmallSquare"],N:["ENG"],o:["Eogon","Eopf"],p:["Epsilon"],q:["Equal","EqualTilde","Equilibrium"],s:["Escr","Esim"],t:["Eta"],T:["ETH"],u:["Euml"],x:["Exists","ExponentialE"]},e:{a:["eacute","easter"],c:["ecaron","ecir","ecirc","ecolon","ecy"],D:["eDDot","eDot"],d:["edot"],e:["ee"],f:["efDot","efr"],g:["eg","egrave","egs","egsdot"],l:["el","elinters","ell","els","elsdot"],m:["emacr","empty","emptyset","emptyv","emsp","emsp13","emsp14"],n:["eng","ensp"],o:["eogon","eopf"],p:["epar","eparsl","eplus","epsi","epsilon","epsiv"],q:["eqcirc","eqcolon","eqsim","eqslantgtr","eqslantless","equals","equest","equiv","equivDD","eqvparsl"],r:["erarr","erDot"],s:["escr","esdot","esim"],t:["eta","eth"],u:["euml","euro"],x:["excl","exist","expectation","exponentiale"]},f:{a:["fallingdotseq"],c:["fcy"],e:["female"],f:["ffilig","fflig","ffllig","ffr"],i:["filig"],j:["fjlig"],l:["flat","fllig","fltns"],n:["fnof"],o:["fopf","forall","fork","forkv"],p:["fpartint"],r:["frac12","frac13","frac14","frac15","frac16","frac18","frac23","frac25","frac34","frac35","frac38","frac45","frac56","frac58","frac78","frasl","frown"],s:["fscr"]},F:{c:["Fcy"],f:["Ffr"],i:["FilledSmallSquare","FilledVerySmallSquare"],o:["Fopf","ForAll","Fouriertrf"],s:["Fscr"]},g:{a:["gacute","gamma","gammad","gap"],b:["gbreve"],c:["gcirc","gcy"],d:["gdot"],E:["gE","gEl"],e:["ge","gel","geq","geqq","geqslant","ges","gescc","gesdot","gesdoto","gesdotol","gesl","gesles"],f:["gfr"],g:["gg","ggg"],i:["gimel"],j:["gjcy"],l:["gl","gla","glE","glj"],n:["gnap","gnapprox","gnE","gne","gneq","gneqq","gnsim"],o:["gopf"],r:["grave"],s:["gscr","gsim","gsime","gsiml"],t:["gt","gtcc","gtcir","gtdot","gtlPar","gtquest","gtrapprox","gtrarr","gtrdot","gtreqless","gtreqqless","gtrless","gtrsim"],v:["gvertneqq","gvnE"]},G:{a:["Gamma","Gammad"],b:["Gbreve"],c:["Gcedil","Gcirc","Gcy"],d:["Gdot"],f:["Gfr"],g:["Gg"],J:["GJcy"],o:["Gopf"],r:["GreaterEqual","GreaterEqualLess","GreaterFullEqual","GreaterGreater","GreaterLess","GreaterSlantEqual","GreaterTilde"],s:["Gscr"],T:["GT"],t:["Gt"]},H:{a:["Hacek","Hat"],A:["HARDcy"],c:["Hcirc"],f:["Hfr"],i:["HilbertSpace"],o:["Hopf","HorizontalLine"],s:["Hscr","Hstrok"],u:["HumpDownHump","HumpEqual"]},h:{a:["hairsp","half","hamilt","hardcy","harr","harrcir","harrw"],A:["hArr"],b:["hbar"],c:["hcirc"],e:["hearts","heartsuit","hellip","hercon"],f:["hfr"],k:["hksearow","hkswarow"],o:["hoarr","homtht","hookleftarrow","hookrightarrow","hopf","horbar"],s:["hscr","hslash","hstrok"],y:["hybull","hyphen"]},I:{a:["Iacute"],c:["Icirc","Icy"],d:["Idot"],E:["IEcy"],f:["Ifr"],g:["Igrave"],J:["IJlig"],m:["Im","Imacr","ImaginaryI","Implies"],n:["Int","Integral","Intersection","InvisibleComma","InvisibleTimes"],O:["IOcy"],o:["Iogon","Iopf","Iota"],s:["Iscr"],t:["Itilde"],u:["Iukcy","Iuml"]},i:{a:["iacute"],c:["ic","icirc","icy"],e:["iecy","iexcl"],f:["iff","ifr"],g:["igrave"],i:["ii","iiiint","iiint","iinfin","iiota"],j:["ijlig"],m:["imacr","image","imagline","imagpart","imath","imof","imped"],n:["in","incare","infin","infintie","inodot","int","intcal","integers","intercal","intlarhk","intprod"],o:["iocy","iogon","iopf","iota"],p:["iprod"],q:["iquest"],s:["iscr","isin","isindot","isinE","isins","isinsv","isinv"],t:["it","itilde"],u:["iukcy","iuml"]},J:{c:["Jcirc","Jcy"],f:["Jfr"],o:["Jopf"],s:["Jscr","Jsercy"],u:["Jukcy"]},j:{c:["jcirc","jcy"],f:["jfr"],m:["jmath"],o:["jopf"],s:["jscr","jsercy"],u:["jukcy"]},K:{a:["Kappa"],c:["Kcedil","Kcy"],f:["Kfr"],H:["KHcy"],J:["KJcy"],o:["Kopf"],s:["Kscr"]},k:{a:["kappa","kappav"],c:["kcedil","kcy"],f:["kfr"],g:["kgreen"],h:["khcy"],j:["kjcy"],o:["kopf"],s:["kscr"]},l:{A:["lAarr","lArr","lAtail"],a:["lacute","laemptyv","lagran","lambda","lang","langd","langle","lap","laquo","larr","larrb","larrbfs","larrfs","larrhk","larrlp","larrpl","larrsim","larrtl","lat","latail","late","lates"],B:["lBarr"],b:["lbarr","lbbrk","lbrace","lbrack","lbrke","lbrksld","lbrkslu"],c:["lcaron","lcedil","lceil","lcub","lcy"],d:["ldca","ldquo","ldquor","ldrdhar","ldrushar","ldsh"],E:["lE","lEg"],e:["le","leftarrow","leftarrowtail","leftharpoondown","leftharpoonup","leftleftarrows","leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","leftthreetimes","leg","leq","leqq","leqslant","les","lescc","lesdot","lesdoto","lesdotor","lesg","lesges","lessapprox","lessdot","lesseqgtr","lesseqqgtr","lessgtr","lesssim"],f:["lfisht","lfloor","lfr"],g:["lg","lgE"],H:["lHar"],h:["lhard","lharu","lharul","lhblk"],j:["ljcy"],l:["ll","llarr","llcorner","llhard","lltri"],m:["lmidot","lmoust","lmoustache"],n:["lnap","lnapprox","lnE","lne","lneq","lneqq","lnsim"],o:["loang","loarr","lobrk","longleftarrow","longleftrightarrow","longmapsto","longrightarrow","looparrowleft","looparrowright","lopar","lopf","loplus","lotimes","lowast","lowbar","loz","lozenge","lozf"],p:["lpar","lparlt"],r:["lrarr","lrcorner","lrhar","lrhard","lrm","lrtri"],s:["lsaquo","lscr","lsh","lsim","lsime","lsimg","lsqb","lsquo","lsquor","lstrok"],t:["lt","ltcc","ltcir","ltdot","lthree","ltimes","ltlarr","ltquest","ltri","ltrie","ltrif","ltrPar"],u:["lurdshar","luruhar"],v:["lvertneqq","lvnE"]},L:{a:["Lacute","Lambda","Lang","Laplacetrf","Larr"],c:["Lcaron","Lcedil","Lcy"],e:["LeftAngleBracket","LeftArrow","Leftarrow","LeftArrowBar","LeftArrowRightArrow","LeftCeiling","LeftDoubleBracket","LeftDownTeeVector","LeftDownVector","LeftDownVectorBar","LeftFloor","LeftRightArrow","Leftrightarrow","LeftRightVector","LeftTee","LeftTeeArrow","LeftTeeVector","LeftTriangle","LeftTriangleBar","LeftTriangleEqual","LeftUpDownVector","LeftUpTeeVector","LeftUpVector","LeftUpVectorBar","LeftVector","LeftVectorBar","LessEqualGreater","LessFullEqual","LessGreater","LessLess","LessSlantEqual","LessTilde"],f:["Lfr"],J:["LJcy"],l:["Ll","Lleftarrow"],m:["Lmidot"],o:["LongLeftArrow","Longleftarrow","LongLeftRightArrow","Longleftrightarrow","LongRightArrow","Longrightarrow","Lopf","LowerLeftArrow","LowerRightArrow"],s:["Lscr","Lsh","Lstrok"],T:["LT"],t:["Lt"]},m:{a:["macr","male","malt","maltese","map","mapsto","mapstodown","mapstoleft","mapstoup","marker"],c:["mcomma","mcy"],d:["mdash"],D:["mDDot"],e:["measuredangle"],f:["mfr"],h:["mho"],i:["micro","mid","midast","midcir","middot","minus","minusb","minusd","minusdu"],l:["mlcp","mldr"],n:["mnplus"],o:["models","mopf"],p:["mp"],s:["mscr","mstpos"],u:["mu","multimap","mumap"]},M:{a:["Map"],c:["Mcy"],e:["MediumSpace","Mellintrf"],f:["Mfr"],i:["MinusPlus"],o:["Mopf"],s:["Mscr"],u:["Mu"]},n:{a:["nabla","nacute","nang","nap","napE","napid","napos","napprox","natur","natural","naturals"],b:["nbsp","nbump","nbumpe"],c:["ncap","ncaron","ncedil","ncong","ncongdot","ncup","ncy"],d:["ndash"],e:["ne","nearhk","neArr","nearr","nearrow","nedot","nequiv","nesear","nesim","nexist","nexists"],f:["nfr"],g:["ngE","nge","ngeq","ngeqq","ngeqslant","nges","ngsim","ngt","ngtr"],G:["nGg","nGt","nGtv"],h:["nhArr","nharr","nhpar"],i:["ni","nis","nisd","niv"],j:["njcy"],l:["nlArr","nlarr","nldr","nlE","nle","nleftarrow","nleftrightarrow","nleq","nleqq","nleqslant","nles","nless","nlsim","nlt","nltri","nltrie"],L:["nLeftarrow","nLeftrightarrow","nLl","nLt","nLtv"],m:["nmid"],o:["nopf","not","notin","notindot","notinE","notinva","notinvb","notinvc","notni","notniva","notnivb","notnivc"],p:["npar","nparallel","nparsl","npart","npolint","npr","nprcue","npre","nprec","npreceq"],r:["nrArr","nrarr","nrarrc","nrarrw","nrightarrow","nrtri","nrtrie"],R:["nRightarrow"],s:["nsc","nsccue","nsce","nscr","nshortmid","nshortparallel","nsim","nsime","nsimeq","nsmid","nspar","nsqsube","nsqsupe","nsub","nsubE","nsube","nsubset","nsubseteq","nsubseteqq","nsucc","nsucceq","nsup","nsupE","nsupe","nsupset","nsupseteq","nsupseteqq"],t:["ntgl","ntilde","ntlg","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq"],u:["nu","num","numero","numsp"],v:["nvap","nvDash","nvdash","nvge","nvgt","nvHarr","nvinfin","nvlArr","nvle","nvlt","nvltrie","nvrArr","nvrtrie","nvsim"],V:["nVDash","nVdash"],w:["nwarhk","nwArr","nwarr","nwarrow","nwnear"]},N:{a:["Nacute"],c:["Ncaron","Ncedil","Ncy"],e:["NegativeMediumSpace","NegativeThickSpace","NegativeThinSpace","NegativeVeryThinSpace","NestedGreaterGreater","NestedLessLess","NewLine"],f:["Nfr"],J:["NJcy"],o:["NoBreak","NonBreakingSpace","Nopf","Not","NotCongruent","NotCupCap","NotDoubleVerticalBar","NotElement","NotEqual","NotEqualTilde","NotExists","NotGreater","NotGreaterEqual","NotGreaterFullEqual","NotGreaterGreater","NotGreaterLess","NotGreaterSlantEqual","NotGreaterTilde","NotHumpDownHump","NotHumpEqual","NotLeftTriangle","NotLeftTriangleBar","NotLeftTriangleEqual","NotLess","NotLessEqual","NotLessGreater","NotLessLess","NotLessSlantEqual","NotLessTilde","NotNestedGreaterGreater","NotNestedLessLess","NotPrecedes","NotPrecedesEqual","NotPrecedesSlantEqual","NotReverseElement","NotRightTriangle","NotRightTriangleBar","NotRightTriangleEqual","NotSquareSubset","NotSquareSubsetEqual","NotSquareSuperset","NotSquareSupersetEqual","NotSubset","NotSubsetEqual","NotSucceeds","NotSucceedsEqual","NotSucceedsSlantEqual","NotSucceedsTilde","NotSuperset","NotSupersetEqual","NotTilde","NotTildeEqual","NotTildeFullEqual","NotTildeTilde","NotVerticalBar"],s:["Nscr"],t:["Ntilde"],u:["Nu"]},O:{a:["Oacute"],c:["Ocirc","Ocy"],d:["Odblac"],E:["OElig"],f:["Ofr"],g:["Ograve"],m:["Omacr","Omega","Omicron"],o:["Oopf"],p:["OpenCurlyDoubleQuote","OpenCurlyQuote"],r:["Or"],s:["Oscr","Oslash"],t:["Otilde","Otimes"],u:["Ouml"],v:["OverBar","OverBrace","OverBracket","OverParenthesis"]},o:{a:["oacute","oast"],c:["ocir","ocirc","ocy"],d:["odash","odblac","odiv","odot","odsold"],e:["oelig"],f:["ofcir","ofr"],g:["ogon","ograve","ogt"],h:["ohbar","ohm"],i:["oint"],l:["olarr","olcir","olcross","oline","olt"],m:["omacr","omega","omicron","omid","ominus"],o:["oopf"],p:["opar","operp","oplus"],r:["or","orarr","ord","order","orderof","ordf","ordm","origof","oror","orslope","orv"],S:["oS"],s:["oscr","oslash","osol"],t:["otilde","otimes","otimesas"],u:["ouml"],v:["ovbar"]},p:{a:["par","para","parallel","parsim","parsl","part"],c:["pcy"],e:["percnt","period","permil","perp","pertenk"],f:["pfr"],h:["phi","phiv","phmmat","phone"],i:["pi","pitchfork","piv"],l:["planck","planckh","plankv","plus","plusacir","plusb","pluscir","plusdo","plusdu","pluse","plusmn","plussim","plustwo"],m:["pm"],o:["pointint","popf","pound"],r:["pr","prap","prcue","prE","pre","prec","precapprox","preccurlyeq","preceq","precnapprox","precneqq","precnsim","precsim","prime","primes","prnap","prnE","prnsim","prod","profalar","profline","profsurf","prop","propto","prsim","prurel"],s:["pscr","psi"],u:["puncsp"]},P:{a:["PartialD"],c:["Pcy"],f:["Pfr"],h:["Phi"],i:["Pi"],l:["PlusMinus"],o:["Poincareplane","Popf"],r:["Pr","Precedes","PrecedesEqual","PrecedesSlantEqual","PrecedesTilde","Prime","Product","Proportion","Proportional"],s:["Pscr","Psi"]},Q:{f:["Qfr"],o:["Qopf"],s:["Qscr"],U:["QUOT"]},q:{f:["qfr"],i:["qint"],o:["qopf"],p:["qprime"],s:["qscr"],u:["quaternions","quatint","quest","questeq","quot"]},r:{A:["rAarr","rArr","rAtail"],a:["race","racute","radic","raemptyv","rang","rangd","range","rangle","raquo","rarr","rarrap","rarrb","rarrbfs","rarrc","rarrfs","rarrhk","rarrlp","rarrpl","rarrsim","rarrtl","rarrw","ratail","ratio","rationals"],B:["rBarr"],b:["rbarr","rbbrk","rbrace","rbrack","rbrke","rbrksld","rbrkslu"],c:["rcaron","rcedil","rceil","rcub","rcy"],d:["rdca","rdldhar","rdquo","rdquor","rdsh"],e:["real","realine","realpart","reals","rect","reg"],f:["rfisht","rfloor","rfr"],H:["rHar"],h:["rhard","rharu","rharul","rho","rhov"],i:["rightarrow","rightarrowtail","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","rightthreetimes","ring","risingdotseq"],l:["rlarr","rlhar","rlm"],m:["rmoust","rmoustache"],n:["rnmid"],o:["roang","roarr","robrk","ropar","ropf","roplus","rotimes"],p:["rpar","rpargt","rppolint"],r:["rrarr"],s:["rsaquo","rscr","rsh","rsqb","rsquo","rsquor"],t:["rthree","rtimes","rtri","rtrie","rtrif","rtriltri"],u:["ruluhar"],x:["rx"]},R:{a:["Racute","Rang","Rarr","Rarrtl"],B:["RBarr"],c:["Rcaron","Rcedil","Rcy"],e:["Re","ReverseElement","ReverseEquilibrium","ReverseUpEquilibrium"],E:["REG"],f:["Rfr"],h:["Rho"],i:["RightAngleBracket","RightArrow","Rightarrow","RightArrowBar","RightArrowLeftArrow","RightCeiling","RightDoubleBracket","RightDownTeeVector","RightDownVector","RightDownVectorBar","RightFloor","RightTee","RightTeeArrow","RightTeeVector","RightTriangle","RightTriangleBar","RightTriangleEqual","RightUpDownVector","RightUpTeeVector","RightUpVector","RightUpVectorBar","RightVector","RightVectorBar"],o:["Ropf","RoundImplies"],r:["Rrightarrow"],s:["Rscr","Rsh"],u:["RuleDelayed"]},S:{a:["Sacute"],c:["Sc","Scaron","Scedil","Scirc","Scy"],f:["Sfr"],H:["SHCHcy","SHcy"],h:["ShortDownArrow","ShortLeftArrow","ShortRightArrow","ShortUpArrow"],i:["Sigma"],m:["SmallCircle"],O:["SOFTcy"],o:["Sopf"],q:["Sqrt","Square","SquareIntersection","SquareSubset","SquareSubsetEqual","SquareSuperset","SquareSupersetEqual","SquareUnion"],s:["Sscr"],t:["Star"],u:["Sub","Subset","SubsetEqual","Succeeds","SucceedsEqual","SucceedsSlantEqual","SucceedsTilde","SuchThat","Sum","Sup","Superset","SupersetEqual","Supset"]},s:{a:["sacute"],b:["sbquo"],c:["sc","scap","scaron","sccue","scE","sce","scedil","scirc","scnap","scnE","scnsim","scpolint","scsim","scy"],d:["sdot","sdotb","sdote"],e:["searhk","seArr","searr","searrow","sect","semi","seswar","setminus","setmn","sext"],f:["sfr","sfrown"],h:["sharp","shchcy","shcy","shortmid","shortparallel","shy"],i:["sigma","sigmaf","sigmav","sim","simdot","sime","simeq","simg","simgE","siml","simlE","simne","simplus","simrarr"],l:["slarr"],m:["smallsetminus","smashp","smeparsl","smid","smile","smt","smte","smtes"],o:["softcy","sol","solb","solbar","sopf"],p:["spades","spadesuit","spar"],q:["sqcap","sqcaps","sqcup","sqcups","sqsub","sqsube","sqsubset","sqsubseteq","sqsup","sqsupe","sqsupset","sqsupseteq","squ","square","squarf","squf"],r:["srarr"],s:["sscr","ssetmn","ssmile","sstarf"],t:["star","starf","straightepsilon","straightphi","strns"],u:["sub","subdot","subE","sube","subedot","submult","subnE","subne","subplus","subrarr","subset","subseteq","subseteqq","subsetneq","subsetneqq","subsim","subsub","subsup","succ","succapprox","succcurlyeq","succeq","succnapprox","succneqq","succnsim","succsim","sum","sung","sup","sup1","sup2","sup3","supdot","supdsub","supE","supe","supedot","suphsol","suphsub","suplarr","supmult","supnE","supne","supplus","supset","supseteq","supseteqq","supsetneq","supsetneqq","supsim","supsub","supsup"],w:["swarhk","swArr","swarr","swarrow","swnwar"],z:["szlig"]},T:{a:["Tab","Tau"],c:["Tcaron","Tcedil","Tcy"],f:["Tfr"],h:["Therefore","Theta","ThickSpace","ThinSpace"],H:["THORN"],i:["Tilde","TildeEqual","TildeFullEqual","TildeTilde"],o:["Topf"],R:["TRADE"],r:["TripleDot"],s:["Tscr","Tstrok"],S:["TScy","TSHcy"]},t:{a:["target","tau"],b:["tbrk"],c:["tcaron","tcedil","tcy"],d:["tdot"],e:["telrec"],f:["tfr"],h:["there4","therefore","theta","thetasym","thetav","thickapprox","thicksim","thinsp","thkap","thksim","thorn"],i:["tilde","times","timesb","timesbar","timesd","tint"],o:["toea","top","topbot","topcir","topf","topfork","tosa"],p:["tprime"],r:["trade","triangle","triangledown","triangleleft","trianglelefteq","triangleq","triangleright","trianglerighteq","tridot","trie","triminus","triplus","trisb","tritime","trpezium"],s:["tscr","tscy","tshcy","tstrok"],w:["twixt","twoheadleftarrow","twoheadrightarrow"]},U:{a:["Uacute","Uarr","Uarrocir"],b:["Ubrcy","Ubreve"],c:["Ucirc","Ucy"],d:["Udblac"],f:["Ufr"],g:["Ugrave"],m:["Umacr"],n:["UnderBar","UnderBrace","UnderBracket","UnderParenthesis","Union","UnionPlus"],o:["Uogon","Uopf"],p:["UpArrow","Uparrow","UpArrowBar","UpArrowDownArrow","UpDownArrow","Updownarrow","UpEquilibrium","UpperLeftArrow","UpperRightArrow","Upsi","Upsilon","UpTee","UpTeeArrow"],r:["Uring"],s:["Uscr"],t:["Utilde"],u:["Uuml"]},u:{a:["uacute","uarr"],A:["uArr"],b:["ubrcy","ubreve"],c:["ucirc","ucy"],d:["udarr","udblac","udhar"],f:["ufisht","ufr"],g:["ugrave"],H:["uHar"],h:["uharl","uharr","uhblk"],l:["ulcorn","ulcorner","ulcrop","ultri"],m:["umacr","uml"],o:["uogon","uopf"],p:["uparrow","updownarrow","upharpoonleft","upharpoonright","uplus","upsi","upsih","upsilon","upuparrows"],r:["urcorn","urcorner","urcrop","uring","urtri"],s:["uscr"],t:["utdot","utilde","utri","utrif"],u:["uuarr","uuml"],w:["uwangle"]},v:{a:["vangrt","varepsilon","varkappa","varnothing","varphi","varpi","varpropto","varr","varrho","varsigma","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartheta","vartriangleleft","vartriangleright"],A:["vArr"],B:["vBar","vBarv"],c:["vcy"],D:["vDash"],d:["vdash"],e:["vee","veebar","veeeq","vellip","verbar","vert"],f:["vfr"],l:["vltri"],n:["vnsub","vnsup"],o:["vopf"],p:["vprop"],r:["vrtri"],s:["vscr","vsubnE","vsubne","vsupnE","vsupne"],z:["vzigzag"]},V:{b:["Vbar"],c:["Vcy"],D:["VDash"],d:["Vdash","Vdashl"],e:["Vee","Verbar","Vert","VerticalBar","VerticalLine","VerticalSeparator","VerticalTilde","VeryThinSpace"],f:["Vfr"],o:["Vopf"],s:["Vscr"],v:["Vvdash"]},W:{c:["Wcirc"],e:["Wedge"],f:["Wfr"],o:["Wopf"],s:["Wscr"]},w:{c:["wcirc"],e:["wedbar","wedge","wedgeq","weierp"],f:["wfr"],o:["wopf"],p:["wp"],r:["wr","wreath"],s:["wscr"]},x:{c:["xcap","xcirc","xcup"],d:["xdtri"],f:["xfr"],h:["xhArr","xharr"],i:["xi"],l:["xlArr","xlarr"],m:["xmap"],n:["xnis"],o:["xodot","xopf","xoplus","xotime"],r:["xrArr","xrarr"],s:["xscr","xsqcup"],u:["xuplus","xutri"],v:["xvee"],w:["xwedge"]},X:{f:["Xfr"],i:["Xi"],o:["Xopf"],s:["Xscr"]},Y:{a:["Yacute"],A:["YAcy"],c:["Ycirc","Ycy"],f:["Yfr"],I:["YIcy"],o:["Yopf"],s:["Yscr"],U:["YUcy"],u:["Yuml"]},y:{a:["yacute","yacy"],c:["ycirc","ycy"],e:["yen"],f:["yfr"],i:["yicy"],o:["yopf"],s:["yscr"],u:["yucy","yuml"]},Z:{a:["Zacute"],c:["Zcaron","Zcy"],d:["Zdot"],e:["ZeroWidthSpace","Zeta"],f:["Zfr"],H:["ZHcy"],o:["Zopf"],s:["Zscr"]},z:{a:["zacute"],c:["zcaron","zcy"],d:["zdot"],e:["zeetrf","zeta"],f:["zfr"],h:["zhcy"],i:["zigrarr"],o:["zopf"],s:["zscr"],w:["zwj","zwnj"]}},xr={1:{p:["sup1"]},2:{1:["blk12","frac12"],p:["sup2"]},3:{1:["emsp13","frac13"],2:["frac23"],p:["sup3"]},4:{1:["blk14","emsp14","frac14"],3:["blk34","frac34"],e:["there4"]},5:{1:["frac15"],2:["frac25"],3:["frac35"],4:["frac45"]},6:{1:["frac16"],5:["frac56"]},8:{1:["frac18"],3:["frac38"],5:["frac58"],7:["frac78"]},e:{t:["Aacute","aacute","acute","Cacute","cacute","CloseCurlyDoubleQuote","CloseCurlyQuote","DiacriticalAcute","DiacriticalDoubleAcute","Eacute","eacute","gacute","Iacute","iacute","Lacute","lacute","late","Nacute","nacute","Oacute","oacute","OpenCurlyDoubleQuote","OpenCurlyQuote","Racute","racute","Sacute","sacute","sdote","smte","Uacute","uacute","Yacute","yacute","Zacute","zacute"],v:["Abreve","abreve","Agrave","agrave","Breve","breve","DiacriticalGrave","DownBreve","Egrave","egrave","Gbreve","gbreve","grave","Igrave","igrave","Ograve","ograve","Ubreve","ubreve","Ugrave","ugrave"],p:["andslope","ape","bumpe","csupe","nbumpe","nsqsupe","nsupe","orslope","sqsupe","supe"],g:["ange","barwedge","bigwedge","blacklozenge","curlywedge","doublebarwedge","ge","image","lozenge","nge","nvge","range","Wedge","wedge","xwedge"],l:["angle","blacktriangle","dwangle","exponentiale","female","langle","le","LeftTriangle","male","measuredangle","nle","NotLeftTriangle","NotRightTriangle","nvle","rangle","RightTriangle","SmallCircle","smile","ssmile","triangle","uwangle"],a:["angmsdae"],d:["Atilde","atilde","DiacriticalTilde","divide","EqualTilde","GreaterTilde","Itilde","itilde","LessTilde","NotEqualTilde","NotGreaterTilde","NotLessTilde","NotSucceedsTilde","NotTilde","NotTildeTilde","Ntilde","ntilde","Otilde","otilde","PrecedesTilde","SucceedsTilde","Tilde","tilde","TildeTilde","trade","Utilde","utilde","VerticalTilde"],m:["backprime","bprime","bsime","gsime","lsime","nsime","Prime","prime","qprime","sime","tprime","tritime","xotime"],e:["barvee","bigvee","curlyvee","cuvee","DoubleLeftTee","DoubleRightTee","DownTee","ee","LeftTee","lthree","RightTee","rthree","UpTee","Vee","vee","xvee"],s:["Because","because","maltese","pluse"],r:["blacksquare","cire","dotsquare","EmptySmallSquare","EmptyVerySmallSquare","FilledSmallSquare","FilledVerySmallSquare","incare","npre","pre","Square","square","Therefore","therefore"],n:["bne","Colone","colone","gne","HorizontalLine","imagline","lne","ne","NewLine","oline","phone","Poincareplane","profline","realine","simne","subne","supne","VerticalLine","vsubne","vsupne"],i:["bowtie","die","infintie","ltrie","nltrie","nrtrie","nvltrie","nvrtrie","rtrie","trie"],b:["csube","nsqsube","nsube","sqsube","sube"],c:["HilbertSpace","lbrace","MediumSpace","NegativeMediumSpace","NegativeThickSpace","NegativeThinSpace","NegativeVeryThinSpace","NonBreakingSpace","nsce","OverBrace","race","rbrace","sce","ThickSpace","ThinSpace","UnderBrace","VeryThinSpace","ZeroWidthSpace"],k:["lbrke","rbrke"],h:["lmoustache","rmoustache"],u:["nprcue","nsccue","prcue","sccue"],R:["Re"]},c:{a:["ac","angmsdac","dblac","Odblac","odblac","Udblac","udblac"],r:["Acirc","acirc","bigcirc","Ccirc","ccirc","circ","circledcirc","Ecirc","ecirc","eqcirc","Gcirc","gcirc","Hcirc","hcirc","Icirc","icirc","Jcirc","jcirc","nrarrc","Ocirc","ocirc","rarrc","Scirc","scirc","Ucirc","ucirc","Wcirc","wcirc","xcirc","Ycirc","ycirc"],s:["cuesc","nsc","sc"],e:["curlyeqprec","nprec","prec","telrec"],c:["curlyeqsucc","gescc","gtcc","lescc","ltcc","nsucc","succ"],i:["ic","radic"],v:["notinvc","notnivc"],S:["Sc"]},d:{c:["acd"],n:["And","and","andand","capand","Diamond","diamond","pound"],d:["andd","dd"],s:["angmsd","minusd","nisd","timesd"],a:["angmsdad","Gammad","gammad"],b:["angrtvbd"],i:["apid","cirmid","mid","napid","nmid","nshortmid","nsmid","omid","rnmid","shortmid","smid"],e:["Barwed","barwed","cuwed","imped","RuleDelayed"],H:["boxHd"],h:["boxhd","DDotrahd"],o:["coprod","intprod","iprod","period","prod"],g:["langd","rangd"],l:["lbrksld","odsold","rbrksld"],r:["lhard","llhard","lrhard","ord","rhard"]},E:{c:["acE","scE"],p:["apE","bumpE","napE","nsupE","supE"],r:["cirE","prE"],l:["ExponentialE","glE","lE","nlE","simlE"],g:["gE","lgE","ngE","simgE"],n:["gnE","gvnE","isinE","lnE","lvnE","notinE","prnE","scnE","subnE","supnE","vsubnE","vsupnE"],b:["nsubE","subE"],D:["TRADE"]},y:{c:["Acy","acy","Bcy","bcy","CHcy","chcy","Dcy","dcy","DJcy","djcy","DScy","dscy","DZcy","dzcy","Ecy","ecy","Fcy","fcy","Gcy","gcy","GJcy","gjcy","HARDcy","hardcy","Icy","icy","IEcy","iecy","IOcy","iocy","Iukcy","iukcy","Jcy","jcy","Jsercy","jsercy","Jukcy","jukcy","Kcy","kcy","KHcy","khcy","KJcy","kjcy","Lcy","lcy","LJcy","ljcy","Mcy","mcy","Ncy","ncy","NJcy","njcy","Ocy","ocy","Pcy","pcy","Rcy","rcy","Scy","scy","SHCHcy","shchcy","SHcy","shcy","SOFTcy","softcy","Tcy","tcy","TScy","tscy","TSHcy","tshcy","Ubrcy","ubrcy","Ucy","ucy","Vcy","vcy","YAcy","yacy","Ycy","ycy","YIcy","yicy","YUcy","yucy","Zcy","zcy","ZHcy","zhcy"],p:["copy"],t:["cylcty","empty"],h:["shy"]},g:{i:["AElig","aelig","ffilig","fflig","ffllig","filig","fjlig","fllig","IJlig","ijlig","OElig","oelig","szlig"],l:["amalg","lg","ntlg"],n:["ang","Aring","aring","backcong","bcong","cong","eng","Lang","lang","LeftCeiling","loang","nang","ncong","Rang","rang","RightCeiling","ring","roang","sung","Uring","uring","varnothing"],a:["angmsdag","vzigzag"],e:["deg","eg","leg","reg"],G:["Gg","nGg"],g:["gg","ggg"],E:["lEg"],s:["lesg"],m:["lsimg","simg"]},f:{a:["af","angmsdaf","sigmaf"],p:["Aopf","aopf","Bopf","bopf","Copf","copf","Dopf","dopf","Eopf","eopf","Fopf","fopf","Gopf","gopf","Hopf","hopf","Iopf","iopf","Jopf","jopf","Kopf","kopf","Lopf","lopf","Mopf","mopf","Nopf","nopf","Oopf","oopf","Popf","popf","Qopf","qopf","Ropf","ropf","Sopf","sopf","Topf","topf","Uopf","uopf","Vopf","vopf","Wopf","wopf","Xopf","xopf","Yopf","yopf","Zopf","zopf"],i:["dtrif","ltrif","rtrif","utrif"],o:["fnof","imof","orderof","origof"],r:["Fouriertrf","Laplacetrf","Mellintrf","profsurf","squarf","sstarf","starf","zeetrf"],l:["half"],f:["iff"],z:["lozf"],d:["ordf"],u:["squf"]},r:{f:["Afr","afr","Bfr","bfr","Cfr","cfr","Dfr","dfr","Efr","efr","Ffr","ffr","Gfr","gfr","Hfr","hfr","Ifr","ifr","Jfr","jfr","Kfr","kfr","Lfr","lfr","Mfr","mfr","Nfr","nfr","Ofr","ofr","Pfr","pfr","Qfr","qfr","Rfr","rfr","Sfr","sfr","Tfr","tfr","Ufr","ufr","Vfr","vfr","Wfr","wfr","Xfr","xfr","Yfr","yfr","Zfr","zfr"],c:["Amacr","amacr","Ascr","ascr","Bscr","bscr","Cscr","cscr","Dscr","dscr","Emacr","emacr","Escr","escr","Fscr","fscr","Gscr","gscr","Hscr","hscr","Imacr","imacr","Iscr","iscr","Jscr","jscr","Kscr","kscr","Lscr","lscr","macr","Mscr","mscr","Nscr","nscr","Omacr","omacr","Oscr","oscr","Pscr","pscr","Qscr","qscr","Rscr","rscr","Sscr","sscr","Tscr","tscr","Umacr","umacr","Uscr","uscr","Vscr","vscr","Wscr","wscr","Xscr","xscr","Yscr","yscr","Zscr","zscr"],r:["angzarr","crarr","cudarrr","cularr","curarr","Darr","dArr","darr","ddarr","dharr","duarr","dzigrarr","erarr","gtrarr","hArr","harr","hoarr","lAarr","Larr","lArr","larr","lBarr","lbarr","llarr","loarr","lrarr","ltlarr","neArr","nearr","nhArr","nharr","nlArr","nlarr","nrArr","nrarr","nvHarr","nvlArr","nvrArr","nwArr","nwarr","olarr","orarr","rAarr","Rarr","rArr","rarr","RBarr","rBarr","rbarr","rlarr","roarr","rrarr","seArr","searr","simrarr","slarr","srarr","subrarr","suplarr","swArr","swarr","Uarr","uArr","uarr","udarr","uharr","uuarr","vArr","varr","xhArr","xharr","xlArr","xlarr","xrArr","xrarr","zigrarr"],i:["apacir","cir","cirscir","ecir","gtcir","harrcir","ltcir","midcir","ocir","ofcir","olcir","plusacir","pluscir","topcir","Uarrocir"],a:["bigstar","brvbar","dHar","dollar","DoubleVerticalBar","DownArrowBar","DownLeftVectorBar","DownRightVectorBar","duhar","epar","gtlPar","hbar","horbar","ldrdhar","ldrushar","LeftArrowBar","LeftDownVectorBar","LeftTriangleBar","LeftUpVectorBar","LeftVectorBar","lHar","lopar","lowbar","lpar","lrhar","ltrPar","lurdshar","luruhar","nesear","nhpar","NotDoubleVerticalBar","NotLeftTriangleBar","NotRightTriangleBar","NotVerticalBar","npar","nspar","nwnear","ohbar","opar","ovbar","OverBar","par","profalar","rdldhar","rHar","RightArrowBar","RightDownVectorBar","RightTriangleBar","RightUpVectorBar","RightVectorBar","rlhar","ropar","rpar","ruluhar","seswar","solbar","spar","Star","star","swnwar","timesbar","udhar","uHar","UnderBar","UpArrowBar","Vbar","vBar","veebar","Verbar","verbar","VerticalBar","wedbar"],D:["boxDr"],d:["boxdr","mldr","nldr"],U:["boxUr"],u:["boxur","natur"],V:["boxVr"],v:["boxvr"],s:["copysr"],p:["cuepr","npr","pr"],o:["cupor","DownLeftRightVector","DownLeftTeeVector","DownLeftVector","DownRightTeeVector","DownRightVector","ldquor","LeftDownTeeVector","LeftDownVector","LeftFloor","LeftRightVector","LeftTeeVector","LeftUpDownVector","LeftUpTeeVector","LeftUpVector","LeftVector","lesdotor","lfloor","lsquor","or","oror","rdquor","rfloor","RightDownTeeVector","RightDownVector","RightFloor","RightTeeVector","RightUpDownVector","RightUpTeeVector","RightUpVector","RightVector","rsquor","VerticalSeparator"],e:["Dagger","dagger","ddagger","easter","GreaterGreater","LessEqualGreater","LessGreater","llcorner","lrcorner","marker","NestedGreaterGreater","NotGreater","NotGreaterGreater","NotLessGreater","NotNestedGreaterGreater","order","ulcorner","urcorner"],t:["eqslantgtr","lesseqgtr","lesseqqgtr","lessgtr","ngtr"],O:["Or"],P:["Pr"],w:["wr"]},m:{y:["alefsym","thetasym"],i:["backsim","bsim","eqsim","Esim","esim","gnsim","gsim","gtrsim","larrsim","lesssim","lnsim","lsim","nesim","ngsim","nlsim","nsim","nvsim","parsim","plussim","precnsim","precsim","prnsim","prsim","rarrsim","scnsim","scsim","sim","subsim","succnsim","succsim","supsim","thicksim","thksim"],o:["bottom"],s:["ccupssm"],r:["curarrm","lrm"],a:["diam"],u:["Equilibrium","num","ReverseEquilibrium","ReverseUpEquilibrium","Sum","sum","trpezium","UpEquilibrium"],I:["Im"],h:["ohm"],d:["ordm"],p:["pm"],l:["rlm"]},h:{p:["aleph","angsph"],a:["angmsdah"],s:["Backslash","circleddash","dash","hslash","ldsh","Lsh","lsh","mdash","ndash","nVDash","nVdash","nvDash","nvdash","odash","Oslash","oslash","rdsh","Rsh","rsh","VDash","Vdash","vDash","vdash","Vvdash"],t:["beth","daleth","eth","imath","jmath","wreath"],x:["boxh"],V:["boxVh"],v:["boxvh"],k:["planckh"],i:["upsih"]},a:{h:["Alpha","alpha"],a:["angmsdaa"],t:["Beta","beta","Delta","delta","Eta","eta","iiota","Iota","iota","Theta","theta","vartheta","Zeta","zeta"],l:["Cedilla","gla","nabla"],m:["comma","digamma","Gamma","gamma","InvisibleComma","mcomma","Sigma","sigma","varsigma"],p:["Kappa","kappa","varkappa"],d:["Lambda","lambda"],c:["ldca","rdca"],v:["notinva","notniva"],g:["Omega","omega"],r:["para"],e:["toea"],s:["tosa"]},P:{M:["AMP"]},p:{m:["amp","asymp","bump","comp","HumpDownHump","mp","nbump","NotHumpDownHump"],a:["ap","bigcap","Cap","cap","capcap","cupbrcap","CupCap","cupcap","gap","gnap","lap","lnap","Map","map","multimap","mumap","nap","ncap","NotCupCap","nvap","prap","prnap","rarrap","scap","scnap","sqcap","thkap","xcap","xmap"],u:["bigcup","bigsqcup","bigtriangleup","capbrcup","capcup","csup","Cup","cup","cupcup","leftharpoonup","mapstoup","ncup","nsup","rightharpoonup","sqcup","sqsup","subsup","Sup","sup","supsup","vnsup","xcup","xsqcup"],r:["cularrp","operp","perp","sharp","weierp"],o:["dlcrop","drcrop","prop","top","ulcrop","urcrop","vprop"],s:["emsp","ensp","hairsp","nbsp","numsp","puncsp","thinsp"],i:["hellip","vellip"],l:["larrlp","rarrlp"],c:["mlcp"],h:["smashp"],w:["wp"]},v:{d:["andv"],r:["Barv","orv","vBarv"],y:["bemptyv","cemptyv","demptyv","emptyv","laemptyv","raemptyv"],i:["bnequiv","div","epsiv","equiv","nequiv","niv","odiv","phiv","piv"],x:["boxv"],h:["Dashv","dashv"],k:["forkv","plankv"],s:["isinsv"],n:["isinv"],a:["kappav","sigmav","thetav"],t:["nGtv","nLtv"],o:["rhov"]},b:{a:["angmsdab","Tab"],v:["angrtvb","notinvb","notnivb"],l:["bsolb","solb"],u:["bsolhsub","csub","lcub","nsub","rcub","sqsub","Sub","sub","subsub","supdsub","suphsub","supsub","vnsub"],r:["larrb","rarrb"],q:["lsqb","rsqb"],s:["minusb","plusb","timesb","trisb"],t:["sdotb"]},t:{r:["angrt","imagpart","npart","part","realpart","Sqrt","vangrt","Vert","vert"],s:["angst","ast","circledast","equest","exist","gtquest","iquest","lmoust","lowast","ltquest","midast","nexist","oast","quest","rmoust"],n:["awconint","awint","Cconint","cent","cirfnint","complement","Congruent","Conint","conint","cwconint","cwint","Element","fpartint","geqslant","iiiint","iiint","Int","int","leqslant","ngeqslant","nleqslant","NotCongruent","NotElement","NotReverseElement","npolint","oint","percnt","pointint","qint","quatint","ReverseElement","rppolint","scpolint","tint"],o:["bigodot","bNot","bnot","bot","capdot","Cdot","cdot","CenterDot","centerdot","CircleDot","congdot","ctdot","cupdot","DiacriticalDot","Dot","dot","DotDot","doteqdot","DoubleDot","dtdot","eDDot","Edot","eDot","edot","efDot","egsdot","elsdot","erDot","esdot","Gdot","gdot","gesdot","gtdot","gtrdot","Idot","inodot","isindot","lesdot","lessdot","Lmidot","lmidot","ltdot","mDDot","middot","ncongdot","nedot","Not","not","notindot","odot","quot","sdot","simdot","subdot","subedot","supdot","supedot","tdot","topbot","tridot","TripleDot","utdot","xodot","Zdot","zdot"],f:["blacktriangleleft","circlearrowleft","curvearrowleft","downharpoonleft","looparrowleft","mapstoleft","ntriangleleft","triangleleft","upharpoonleft","vartriangleleft"],h:["blacktriangleright","circlearrowright","curvearrowright","dfisht","downharpoonright","homtht","lfisht","looparrowright","ntriangleright","rfisht","triangleright","ufisht","upharpoonright","vartriangleright"],e:["bullet","caret","emptyset","LeftAngleBracket","LeftDoubleBracket","NotSquareSubset","NotSquareSuperset","NotSubset","NotSuperset","nsubset","nsupset","OverBracket","RightAngleBracket","RightDoubleBracket","sqsubset","sqsupset","SquareSubset","SquareSuperset","Subset","subset","Superset","Supset","supset","target","UnderBracket"],i:["clubsuit","diamondsuit","heartsuit","it","spadesuit"],a:["commat","flat","Hat","lat","phmmat","SuchThat"],c:["Coproduct","Product","rect","sect"],G:["Gt","nGt"],g:["gt","ngt","nvgt","ogt","rpargt"],l:["hamilt","lparlt","lt","malt","nlt","nvlt","olt","submult","supmult"],L:["Lt","nLt"],x:["sext","twixt"],m:["smt"]},n:{o:["Aogon","aogon","ApplyFunction","backepsilon","caron","Ccaron","ccaron","Colon","colon","Dcaron","dcaron","Ecaron","ecaron","ecolon","Eogon","eogon","Epsilon","epsilon","eqcolon","expectation","hercon","Intersection","Iogon","iogon","Lcaron","lcaron","Ncaron","ncaron","ogon","Omicron","omicron","Proportion","Rcaron","rcaron","Scaron","scaron","SquareIntersection","SquareUnion","straightepsilon","Tcaron","tcaron","Union","Uogon","uogon","Upsilon","upsilon","varepsilon","Zcaron","zcaron"],g:["Assign"],e:["between","curren","hyphen","kgreen","yen"],w:["bigtriangledown","blacktriangledown","frown","leftharpoondown","mapstodown","rightharpoondown","sfrown","triangledown"],f:["compfn"],i:["disin","iinfin","in","infin","isin","notin","nvinfin"],r:["dlcorn","drcorn","thorn","ulcorn","urcorn"],a:["lagran"],m:["plusmn","setmn","ssetmn"]},s:{o:["apos","mstpos","napos"],u:["becaus","bigoplus","biguplus","boxminus","boxplus","CircleMinus","CirclePlus","dotminus","dotplus","eplus","loplus","minus","MinusPlus","mnplus","ominus","oplus","plus","PlusMinus","roplus","setminus","simplus","smallsetminus","subplus","supplus","triminus","triplus","UnionPlus","uplus","xoplus","xuplus"],i:["Bernoullis","nis","OverParenthesis","UnderParenthesis","xnis"],e:["bigotimes","boxtimes","CircleTimes","complexes","divideontimes","ges","gesles","Implies","InvisibleTimes","lates","leftthreetimes","les","lesges","lotimes","ltimes","nges","nles","NotPrecedes","Otimes","otimes","Precedes","primes","rightthreetimes","rotimes","RoundImplies","rtimes","smtes","spades","times"],p:["caps","ccaps","ccups","cups","sqcaps","sqcups"],y:["Cayleys"],b:["clubs"],s:["Cross","cross","eqslantless","GreaterEqualLess","GreaterLess","gtreqless","gtreqqless","gtrless","LessLess","NestedLessLess","nless","NotGreaterLess","NotLess","NotLessLess","NotNestedLessLess","olcross"],m:["diams"],w:["downdownarrows","leftleftarrows","leftrightarrows","rightleftarrows","rightrightarrows","upuparrows"],g:["egs"],r:["elinters","integers"],l:["els","equals","models","naturals","rationals","reals"],t:["Exists","hearts","nexists","NotExists"],n:["fltns","isins","leftrightharpoons","quaternions","rightleftharpoons","strns"],f:["larrbfs","larrfs","rarrbfs","rarrfs"],d:["NotSucceeds","Succeeds"],a:["otimesas"]},x:{o:["approx","boxbox","gnapprox","gtrapprox","lessapprox","lnapprox","napprox","precapprox","precnapprox","succapprox","succnapprox","thickapprox"],n:["divonx"],r:["rx"]},q:{e:["approxeq","asympeq","backsimeq","Bumpeq","bumpeq","circeq","coloneq","ddotseq","doteq","fallingdotseq","geq","gneq","leq","lneq","ngeq","nleq","npreceq","nsimeq","nsubseteq","nsucceq","nsupseteq","ntrianglelefteq","ntrianglerighteq","preccurlyeq","preceq","questeq","risingdotseq","simeq","sqsubseteq","sqsupseteq","subseteq","subsetneq","succcurlyeq","succeq","supseteq","supsetneq","trianglelefteq","triangleq","trianglerighteq","varsubsetneq","varsupsetneq","veeeq","wedgeq"],q:["geqq","gneqq","gvertneqq","leqq","lneqq","lvertneqq","ngeqq","nleqq","nsubseteqq","nsupseteqq","precneqq","subseteqq","subsetneqq","succneqq","supseteqq","supsetneqq","varsubsetneqq","varsupsetneqq"]},l:{m:["Auml","auml","Euml","euml","gsiml","Iuml","iuml","Ouml","ouml","siml","uml","Uuml","uuml","Yuml","yuml"],D:["boxDl"],d:["boxdl"],U:["boxUl"],u:["boxul","lharul","rharul"],V:["boxVl"],v:["boxvl"],o:["bsol","dsol","gesdotol","osol","sol","suphsol"],l:["bull","ell","ForAll","forall","hybull","ll"],i:["Ccedil","ccedil","cedil","Gcedil","Kcedil","kcedil","lAtail","latail","Lcedil","lcedil","lceil","leftarrowtail","Ncedil","ncedil","permil","rAtail","ratail","Rcedil","rcedil","rceil","rightarrowtail","Scedil","scedil","Tcedil","tcedil"],a:["ClockwiseContourIntegral","ContourIntegral","CounterClockwiseContourIntegral","DotEqual","DoubleContourIntegral","Equal","GreaterEqual","GreaterFullEqual","GreaterSlantEqual","HumpEqual","intcal","Integral","intercal","LeftTriangleEqual","LessFullEqual","LessSlantEqual","natural","NotEqual","NotGreaterEqual","NotGreaterFullEqual","NotGreaterSlantEqual","NotHumpEqual","NotLeftTriangleEqual","NotLessEqual","NotLessSlantEqual","NotPrecedesEqual","NotPrecedesSlantEqual","NotRightTriangleEqual","NotSquareSubsetEqual","NotSquareSupersetEqual","NotSubsetEqual","NotSucceedsEqual","NotSucceedsSlantEqual","NotSupersetEqual","NotTildeEqual","NotTildeFullEqual","PrecedesEqual","PrecedesSlantEqual","Proportional","real","RightTriangleEqual","SquareSubsetEqual","SquareSupersetEqual","SubsetEqual","SucceedsEqual","SucceedsSlantEqual","SupersetEqual","TildeEqual","TildeFullEqual"],r:["cudarrl","dharl","uharl"],e:["Del","el","gel","gimel","nparallel","nshortparallel","parallel","prurel","shortparallel"],s:["eparsl","eqvparsl","frasl","gesl","nparsl","parsl","smeparsl"],c:["excl","iexcl"],E:["gEl"],g:["gl","ntgl"],p:["larrpl","rarrpl"],t:["larrtl","Rarrtl","rarrtl"],L:["Ll","nLl"],h:["Vdashl"]},k:{r:["bbrk","bbrktbrk","checkmark","fork","lbbrk","lobrk","pitchfork","rbbrk","robrk","tbrk","topfork"],n:["blank","pertenk"],c:["block","check","lbrack","planck","rbrack"],o:["Dstrok","dstrok","Hstrok","hstrok","Lstrok","lstrok","Tstrok","tstrok"],e:["Hacek"],h:["intlarhk","larrhk","nearhk","nwarhk","rarrhk","searhk","swarhk"],l:["lhblk","uhblk"],a:["NoBreak"]},o:{u:["bdquo","laquo","ldquo","lsaquo","lsquo","raquo","rdquo","rsaquo","rsquo","sbquo"],r:["euro","micro","numero"],t:["gesdoto","lesdoto","longmapsto","mapsto","propto","varpropto"],h:["mho","Rho","rho","varrho"],d:["plusdo"],w:["plustwo"],i:["ratio"]},i:{s:["bepsi","epsi","Psi","psi","Upsi","upsi"],m:["bsemi","semi"],h:["Chi","chi","Phi","phi","straightphi","varphi"],r:["dtri","lltri","lrtri","ltri","nltri","nrtri","rtri","rtriltri","ultri","urtri","utri","vltri","vrtri","xdtri","xutri"],i:["ii"],n:["ni","notni"],P:["Pi"],p:["pi","varpi"],X:["Xi"],x:["xi"]},u:{o:["bernou"],H:["boxHu"],h:["boxhu"],l:["lbrkslu","rbrkslu"],r:["lharu","rharu"],d:["minusdu","plusdu"],M:["Mu"],m:["mu"],N:["Nu"],n:["nu"],q:["squ"],a:["Tau","tau"]},w:{o:["bkarow","dbkarow","DoubleDownArrow","DoubleLeftArrow","DoubleLeftRightArrow","DoubleLongLeftArrow","DoubleLongLeftRightArrow","DoubleLongRightArrow","DoubleRightArrow","DoubleUpArrow","DoubleUpDownArrow","DownArrow","Downarrow","downarrow","DownArrowUpArrow","DownTeeArrow","drbkarow","hksearow","hkswarow","hookleftarrow","hookrightarrow","LeftArrow","Leftarrow","leftarrow","LeftArrowRightArrow","LeftRightArrow","Leftrightarrow","leftrightarrow","leftrightsquigarrow","LeftTeeArrow","Lleftarrow","LongLeftArrow","Longleftarrow","longleftarrow","LongLeftRightArrow","Longleftrightarrow","longleftrightarrow","LongRightArrow","Longrightarrow","longrightarrow","LowerLeftArrow","LowerRightArrow","nearrow","nLeftarrow","nleftarrow","nLeftrightarrow","nleftrightarrow","nRightarrow","nrightarrow","nwarrow","RightArrow","Rightarrow","rightarrow","RightArrowLeftArrow","rightsquigarrow","RightTeeArrow","Rrightarrow","searrow","ShortDownArrow","ShortLeftArrow","ShortRightArrow","ShortUpArrow","swarrow","twoheadleftarrow","twoheadrightarrow","UpArrow","Uparrow","uparrow","UpArrowDownArrow","UpDownArrow","Updownarrow","updownarrow","UpperLeftArrow","UpperRightArrow","UpTeeArrow"],r:["harrw","nrarrw","rarrw"]},L:{D:["boxDL"],d:["boxdL"],U:["boxUL"],u:["boxuL"],V:["boxVL"],v:["boxvL"]},R:{D:["boxDR"],d:["boxdR","circledR"],U:["boxUR"],u:["boxuR"],V:["boxVR"],v:["boxvR"]},H:{x:["boxH"],V:["boxVH"],v:["boxvH"],T:["ETH"]},D:{H:["boxHD"],h:["boxhD"],l:["CapitalDifferentialD","DifferentialD","PartialD"],D:["DD","equivDD"]},U:{H:["boxHU"],h:["boxhU"]},V:{x:["boxV"]},S:{d:["circledS"],o:["oS"]},Y:{P:["COPY"]},G:{N:["ENG"],E:["REG"]},j:{l:["glj"],w:["zwj"],n:["zwnj"]},T:{G:["GT"],L:["LT"],O:["QUOT"]},I:{y:["ImaginaryI"]},z:{o:["loz"]},N:{R:["THORN"]}};function Rr(r){const e={value:r,hungry:!1,optional:!1};return(e.value.endsWith("?*")||e.value.endsWith("*?"))&&e.value.length>2?(e.value=e.value.slice(0,e.value.length-2),e.optional=!0,e.hungry=!0):e.value.endsWith("?")&&e.value.length>1?(e.value=e.value.slice(0,e.value.length-1),e.optional=!0):e.value.endsWith("*")&&e.value.length>1&&(e.value=e.value.slice(0,e.value.length-1),e.hungry=!0),e}function Vr(r){return"number"==typeof r}function Or(r){return"string"==typeof r}function jr(r,e){if("string"!=typeof r||!r.length)return null;if(e&&"number"==typeof e||(e=0),!r[e+1])return null;if(r[e+1]&&r[e+1].trim().length)return e+1;if(r[e+2]&&r[e+2].trim().length)return e+2;for(let t=e+1,a=r.length;t<a;t++)if(r[t].trim().length)return t;return null}function Cr(r,e){if("string"!=typeof r||!r.length)return null;if(e&&"number"==typeof e||(e=0),e<1)return null;if(r[e-1]&&r[e-1].trim().length)return e-1;if(r[e-2]&&r[e-2].trim().length)return e-2;for(let t=e;t--;)if(r[t]&&r[t].trim().length)return t;return null}function _r(r,e,t,a,o){if("string"!=typeof e||!e.length)return null;if(t&&"number"==typeof t||(t=0),"right"===r&&!e[t+1]||"left"===r&&!e[t-1])return null;let n=t;const s=[];let i,l,c,u=0;for(;u<o.length;){if(!Or(o[u])||!o[u].length){u++;continue}const{value:t,optional:p,hungry:g}=Rr(o[u]),f="right"===r?jr(e,n):Cr(e,n);if(!(a.i&&e[f].toLowerCase()===t.toLowerCase()||!a.i&&e[f]===t)){if(p){u++;continue}if(c){u++,c=void 0;continue}return null}{const o="right"===r?jr(e,f):Cr(e,f);g&&(a.i&&e[o].toLowerCase()===t.toLowerCase()||!a.i&&e[o]===t)?c=!0:u++,"right"===r&&f>n+1?s.push([n+1,f]):"left"===r&&f<n-1&&s.unshift([f+1,n]),n=f,"right"===r?(void 0===i&&(i=f),l=f):(void 0===l&&(l=f),i=f)}}return void 0===i?null:{gaps:s,leftmostChar:i,rightmostChar:l}}function Ur(r,e,...t){if(!t.length)return Cr(r,e);const a={i:!1};let o;return _r("left",r,e,o=g(t[0])?Object.assign({},a,t.shift()):a,Array.from(t).reverse())}function Br(r,e,...t){if(!t.length)return jr(r,e);const a={i:!1};let o;return _r("right",r,e,o=g(t[0])?Object.assign({},a,t.shift()):a,t)}function Ir(r,e,t,a,o){if("string"!=typeof e||!e.length)return null;if(t&&"number"==typeof t||(t=0),"right"===r&&!e[t+1]||"left"===r&&(Vr(t)&&t<1||"0"===t))return null;let n=null,s=null;do{null!==(n="right"===r?Br(e,Vr(s)?s:t,...o):Ur(e,Vr(s)?s:t,...o))&&(s="right"===r?n.rightmostChar:n.leftmostChar)}while(n);if(null!=s&&"right"===r&&s++,null===s)return null;if("right"===r){if(e[s]&&e[s].trim().length)return s;const r=jr(e,s);if(0===a.mode){if(r===s+1)return s;if(!(e.slice(s,r||e.length).trim().length||e.slice(s,r||e.length).includes("\n")||e.slice(s,r||e.length).includes("\r")))return r?r-1:e.length;for(let r=s,t=e.length;r<t;r++)if("\n\r".includes(e[r]))return r}else{if(1===a.mode)return s;if(2===a.mode){const r=e.slice(s);if(r.trim().length||r.includes("\n")||r.includes("\r"))for(let r=s,t=e.length;r<t;r++)if(e[r].trim().length||"\n\r".includes(e[r]))return r;return e.length}}return r||e.length}if(e[s]&&e[s-1]&&e[s-1].trim().length)return s;const i=Cr(e,s);if(0===a.mode){if(i===s-2)return s;if(e.slice(0,s).trim().length||e.slice(0,s).includes("\n")||e.slice(0,s).includes("\r"))for(let r=s;r--;)if("\n\r".includes(e[r])||e[r].trim().length)return r+1+(e[r].trim().length?1:0);return 0}if(1===a.mode)return s;if(2===a.mode){const r=e.slice(0,s);if(r.trim().length||r.includes("\n")||r.includes("\r"))for(let r=s;r--;)if(e[r].trim().length||"\n\r".includes(e[r]))return r+1;return 0}return null!==i?i+1:0}function Pr(r){return"string"==typeof r&&1===r.length&&(r.charCodeAt(0)>64&&r.charCodeAt(0)<91||r.charCodeAt(0)>96&&r.charCodeAt(0)<123)}return function(t,a){function o(r){return!("string"==typeof r&&1===r.length&&r.toUpperCase()!==r.toLowerCase())}if("string"!=typeof t)throw new Error("string-fix-broken-named-entities: [THROW_ID_01] the first input argument must be string! It was given as:\n".concat(JSON.stringify(t,null,4)," (").concat(r(t),"-type)"));var n,s={decode:!1,cb:null,progressFn:null};if(null!=a){if(!g(a))throw new Error("string-fix-broken-named-entities: [THROW_ID_02] the second input argument must be a plain object! I was given as:\n".concat(JSON.stringify(a,null,4)," (").concat(r(a),"-type)"));n=Object.assign({},s,a)}else n=s;if(n.cb&&"function"!=typeof n.cb)throw new TypeError("string-fix-broken-named-entities: [THROW_ID_03] opts.cb must be a function (or falsey)! Currently it's: ".concat(r(n.cb),", equal to: ").concat(JSON.stringify(n.cb,null,4)));if(n.progressFn&&"function"!=typeof n.progressFn)throw new TypeError("string-fix-broken-named-entities: [THROW_ID_04] opts.progressFn must be a function (or falsey)! Currently it's: ".concat(r(n.progressFn),", equal to: ").concat(JSON.stringify(n.progressFn,null,4)));var i,l,c,u,p,f,d=!1,h={nameStartsAt:null,ampersandNecessary:null,patience:2,matchedN:null,matchedB:null,matchedS:null,matchedP:null,matchedSemicol:null},m=A(h),b=function(){m=A(h)},y=[],w=[],v=t.length+1,q=0,E=null,S=null,D=function(r){if(n.progressFn&&(p=Math.floor(q/v*100))!==f&&(f=p,n.progressFn(p)),E){if(!(!0!==E&&r>=E))return L=r,"continue";E=null}if(c=(null!==m.matchedN?1:0)+(null!==m.matchedB?1:0)+(null!==m.matchedS?1:0)+(null!==m.matchedP?1:0),u=[m.matchedN,m.matchedB,m.matchedS,m.matchedP].filter(function(r){return null!==r}),i=Math.min.apply(Math,e(u)),l=Math.max.apply(Math,e(u)),null!==m.nameStartsAt&&c>2&&(null!==m.matchedSemicol||!m.ampersandNecessary||o(t[m.nameStartsAt-1])&&o(t[r])||(o(t[m.nameStartsAt-1])||o(t[r]))&&l-i<=4||null!==m.matchedN&&null!==m.matchedB&&null!==m.matchedS&&null!==m.matchedP&&m.matchedN+1===m.matchedB&&m.matchedB+1===m.matchedS&&m.matchedS+1===m.matchedP)&&(!t[r]||null!==m.matchedN&&null!==m.matchedB&&null!==m.matchedS&&null!==m.matchedP&&t[r]!==t[r-1]||"n"!==t[r].toLowerCase()&&"b"!==t[r].toLowerCase()&&"s"!==t[r].toLowerCase()&&"p"!==t[r].toLowerCase()||";"===t[Cr(t,r)])&&";"!==t[r]&&(void 0===t[r+1]||";"!==t[jr(t,r)])){if(!1!==m.ampersandNecessary&&"&nbsp;"!==t.slice(m.nameStartsAt,r)||!1===m.ampersandNecessary&&"nbsp;"!==t.slice(Math.min(m.matchedN,m.matchedB,m.matchedS,m.matchedP),r))if(null==m.nameStartsAt||r-m.nameStartsAt!=5||"&nbsp"!==t.slice(m.nameStartsAt,r)||n.decode){var a=function(r,e,...t){if(!t.length||1===t.length&&g(t[0]))return null;const a={mode:0};if(g(t[0])){const o=Object.assign({},a,A(t[0]));if(o.mode){if(Or(o.mode)&&"0123".includes(o.mode))o.mode=Number.parseInt(o.mode,10);else if(!Vr(o.mode))throw new Error(`string-left-right/chompLeft(): [THROW_ID_01] the opts.mode is wrong! It should be 0, 1, 2 or 3. It was given as ${o.mode} (type ${typeof o.mode})`)}else o.mode=0;return Ir("left",r,e,o,A(t).slice(1))}return Or(t[0])?Ir("left",r,e,a,A(t)):Ir("left",r,e,a,A(t).slice(1))}(t,m.nameStartsAt,"&?","a","m","p",";?"),s=a||m.nameStartsAt;n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-malformed-nbsp",entityName:"nbsp",rangeFrom:s,rangeTo:r,rangeValEncoded:"&nbsp;",rangeValDecoded:" "})),y.push([s,r,n.decode?" ":"&nbsp;"])}else n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"nbsp",rangeFrom:r,rangeTo:r,rangeValEncoded:";",rangeValDecoded:";"})),y.push([r,r,";"]);return b(),L=r,"continue|outerloop"}if(t[r]&&";"===t[r-1]&&!Ur(t,r-1,"a","m","p")&&";"!==t[r]&&c>0)return b(),L=r,"continue|outerloop";if(null!==S&&(!t[r]||t[r].trim().length&&!Pr(t[r]))){if(r>S+1&&"&"!==t[r]){t.slice(S,r);var h=t[Cr(t,S)];if(("&"!==h||t[r]&&";"===t[r])&&"&"!==h&&t[r]&&";"===t[r]){var D,T,k=Cr(t,r),N=k?Cr(t,k):null;if(null!==N&&xr.hasOwnProperty(t[k])&&xr[t[k]].hasOwnProperty(t[N])&&xr[t[k]][t[N]].some(function(a){var o=Ur.apply(void 0,[t,r].concat(e(a.split(""))));if(o&&"nbsp"!==a)return D=a,T=o,L=r,!0})){var x=function(r){if("string"!=typeof r||!r.length||!r.startsWith("&")||!r.endsWith(";"))throw new Error(`all-named-html-entities: [THROW_ID_01] Input must be an HTML entity with leading ampersand and trailing semicolon, but "${r}" was given`);const e=r.slice(1,r.length-1);return kr[e]?kr[e]:null}("&".concat(D,";"));n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-malformed-".concat(D),entityName:D,rangeFrom:T.leftmostChar,rangeTo:r+1,rangeValEncoded:"&".concat(D,";"),rangeValDecoded:x})),y.push([T.leftmostChar,r+1,n.decode?x:"&".concat(D,";")])}}}S=null}if(null===S&&Pr(t[r])&&(S=r),"a"===t[r]){var R=Br(t,r,"m","p",";");if(R){var V=R.rightmostChar+1,O=Br(t,R.rightmostChar,"a","m","p",";");if(O){var j;V=O.rightmostChar+1;do{(j=Br(t,V-1,"a","m","p",";"))&&(V=j.rightmostChar+1)}while(j)}var C,_=jr(t,V-1),U=_?jr(t,_):null;if(U&&Nr.hasOwnProperty(t[_])&&Nr[t[_]].hasOwnProperty(t[U])&&Nr[t[_]][t[U]].some(function(e){if(t.startsWith("".concat(e,";"),_))return C=e,L=r,!0})){E=_+C.length+1;var B=Cr(t,r);if("&"===t[B])n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-multiple-encoding",entityName:"amp",rangeFrom:B+1,rangeTo:_,rangeValEncoded:null,rangeValDecoded:null})),y.push([B+1,_]);else if(B){var I=B+1,P="";t[I].trim().length||(" "===t[I]?I++:"\n\r".includes(t[I])?I=r:P=" "),n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-multiple-encoding",entityName:"amp",rangeFrom:I,rangeTo:_,rangeValEncoded:"".concat(P,"&"),rangeValDecoded:"".concat(P,"&")})),y.push([I,_,"".concat(P,"&")])}}}}if("&"===t[r]){if(m.nameStartsAt&&m.nameStartsAt<r&&(m.matchedN||m.matchedB||m.matchedS||m.matchedP)&&b(),null===m.nameStartsAt)null===m.ampersandNecessary&&(m.nameStartsAt=r,m.ampersandNecessary=!1);else if(!m.ampersandNecessary){var H=r+1,G=jr(t,r);if("&"===t[G])for(var F=G;F<v;F++)if(t[F].trim().length&&"&"!==t[F]){H=F,E=F;break}n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-duplicate-ampersand",entityName:"nbsp",rangeFrom:r,rangeTo:H,rangeValEncoded:null,rangeValDecoded:null})),y.push([r,H])}if("a"===t[r+1]&&"n"===t[r+2]&&"g"===t[r+3]){if("s"!==t[r+4]&&";"!==t[r+4])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"ang",rangeFrom:r+4,rangeTo:r+4,rangeValEncoded:"&ang;",rangeValDecoded:"∠"})),y.push([r,r+4,n.decode?"∠":"&ang;"]),L=r+=3,"continue|outerloop";if("s"===t[r+4]&&"t"===t[r+5]&&";"!==t[r+6])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"angst",rangeFrom:r+6,rangeTo:r+6,rangeValEncoded:"&angst;",rangeValDecoded:"Å"})),y.push([r,r+6,n.decode?"Å":"&angst;"]),L=r+=5,"continue|outerloop"}else if("p"===t[r+1]&&"i"===t[r+2]){if("v"!==t[r+3]&&";"!==t[r+3])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"pi",rangeFrom:r+3,rangeTo:r+3,rangeValEncoded:"&pi;",rangeValDecoded:"π"})),y.push([r,r+3,n.decode?"π":"&pi;"]),L=r+=3,"continue|outerloop";if("v"===t[r+3]&&";"!==t[r+4])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"piv",rangeFrom:r+4,rangeTo:r+4,rangeValEncoded:"&piv;",rangeValDecoded:"ϖ"})),y.push([r,r+4,n.decode?"ϖ":"&piv;"]),L=r+=3,"continue|outerloop"}else{if("P"===t[r+1]&&"i"===t[r+2]&&";"!==t[r+3])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"Pi",rangeFrom:r+3,rangeTo:r+3,rangeValEncoded:"&Pi;",rangeValDecoded:"Π"})),y.push([r,r+3,n.decode?"Π":"&Pi;"]),L=r+=2,"continue|outerloop";if("s"===t[r+1]){if("i"===t[r+2]&&"g"===t[r+3]&&"m"===t[r+4]&&"a"===t[r+5]&&";"!==t[r+6]&&"f"!==t[r+6])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"sigma",rangeFrom:r+6,rangeTo:r+6,rangeValEncoded:"&sigma;",rangeValDecoded:"σ"})),y.push([r,r+6,n.decode?"σ":"&sigma;"]),L=r+=5,"continue|outerloop";if("u"===t[r+2]&&"b"===t[r+3]&&";"!==t[r+4]&&"e"!==t[r+4])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"sub",rangeFrom:r+4,rangeTo:r+4,rangeValEncoded:"&sub;",rangeValDecoded:"⊂"})),y.push([r,r+4,n.decode?"⊂":"&sub;"]),L=r+=3,"continue|outerloop";if("u"===t[r+2]&&"p"===t[r+3]&&"f"!==t[r+4]&&"e"!==t[r+4]&&"1"!==t[r+4]&&"2"!==t[r+4]&&"3"!==t[r+4]&&";"!==t[r+4])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"sup",rangeFrom:r+4,rangeTo:r+4,rangeValEncoded:"&sup;",rangeValDecoded:"⊃"})),y.push([r,r+4,n.decode?"⊃":"&sup;"]),L=r+=3,"continue|outerloop"}else if("t"===t[r+1]){if("h"===t[r+2]&&"e"===t[r+3]&&"t"===t[r+4]&&"a"===t[r+5]&&"s"!==t[r+6]&&";"!==t[r+6])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"theta",rangeFrom:r+6,rangeTo:r+6,rangeValEncoded:"&theta;",rangeValDecoded:"θ"})),y.push([r,r+6,n.decode?"θ":"&theta;"]),L=r+=5,"continue|outerloop";if("h"===t[r+2]&&"i"===t[r+3]&&"n"===t[r+4]&&"s"===t[r+5]&&"p"===t[r+6]&&";"!==t[r+7])return n.cb&&w.push(n.cb({ruleName:"bad-named-html-entity-missing-semicolon",entityName:"thinsp",rangeFrom:r+7,rangeTo:r+7,rangeValEncoded:"&thinsp;",rangeValDecoded:" "})),y.push([r,r+7,n.decode?" ":"&thinsp;"]),L=r+=6,"continue|outerloop"}}}if(t[r]&&"n"===t[r].toLowerCase()){if("i"===t[r-1]&&"s"===t[r+1])return b(),L=r,"continue|outerloop";null===m.matchedN&&(m.matchedN=r),null===m.nameStartsAt&&(m.nameStartsAt=r,null!==m.ampersandNecessary||d?!0!==m.ampersandNecessary&&(m.ampersandNecessary=!1):m.ampersandNecessary=!0)}if(t[r]&&"b"===t[r].toLowerCase())if(null!==m.nameStartsAt)null===m.matchedB&&(m.matchedB=r);else{if(!m.patience)return b(),L=r,"continue|outerloop";m.patience--,m.nameStartsAt=r,m.matchedB=r,null!==m.ampersandNecessary||d?!0!==m.ampersandNecessary&&(m.ampersandNecessary=!1):m.ampersandNecessary=!0}if(t[r]&&"s"===t[r].toLowerCase())if(null!==m.nameStartsAt)null===m.matchedS&&(m.matchedS=r);else{if(!m.patience)return b(),L=r,"continue|outerloop";m.patience--,m.nameStartsAt=r,m.matchedS=r,null!==m.ampersandNecessary||d?!0!==m.ampersandNecessary&&(m.ampersandNecessary=!1):m.ampersandNecessary=!0}if(t[r]&&"p"===t[r].toLowerCase())if(null!==m.nameStartsAt)null===m.matchedP&&(m.matchedP=r);else{if(!m.patience)return b(),L=r,"continue|outerloop";m.patience--,m.nameStartsAt=r,m.matchedP=r,null!==m.ampersandNecessary||d?!0!==m.ampersandNecessary&&(m.ampersandNecessary=!1):m.ampersandNecessary=!0}if(";"===t[r]&&null!==m.nameStartsAt&&(m.matchedSemicol=r,(!m.matchedN||m.matchedB||m.matchedS||m.matchedP)&&(m.matchedN||!m.matchedB||m.matchedS||m.matchedP)&&(m.matchedN||m.matchedB||!m.matchedS||m.matchedP)&&(m.matchedN||m.matchedB||m.matchedS||!m.matchedP)||b()),d&&(d=!1,m.nameStartsAt&&(m.matchedN||m.matchedB||m.matchedS||m.matchedP)&&(m.ampersandNecessary=!1)),null!==m.nameStartsAt&&r>m.nameStartsAt&&t[r]&&"n"!==t[r].toLowerCase()&&"b"!==t[r].toLowerCase()&&"s"!==t[r].toLowerCase()&&"p"!==t[r].toLowerCase()&&"&"!==t[r]&&";"!==t[r]&&" "!==t[r]){if(!m.patience)return b(),L=r,"continue|outerloop";m.patience=m.patience-1}q++,L=r};r:for(var L=0;L<v;L++)switch(D(L)){case"continue":continue;case"continue|outerloop":continue r}return y.length?n.cb?w.filter(function(r,e){return!y.some(function(r,t){return e!==t&&y[e][0]>=r[0]&&y[e][1]<=r[1]})}):function(r,e){function t(r){return"string"==typeof r}if(!Array.isArray(r))return r;const a={mergeType:1,progressFn:null,joinRangesThatTouchEdges:!0};let o;if(e){if(!g(e))throw new Error(`emlint: [THROW_ID_03] the second input argument must be a plain object. It was given as:\n${JSON.stringify(e,null,4)} (type ${typeof e})`);if((o=Object.assign({},a,e)).progressFn&&"function"!=typeof o.progressFn)throw new Error(`ranges-merge: [THROW_ID_01] the second input argument must be a function! It was given of a type: "${typeof o.progressFn}", equal to ${JSON.stringify(o.progressFn,null,4)}`);if(o.mergeType&&1!==o.mergeType&&2!==o.mergeType)if(t(o.mergeType)&&"1"===o.mergeType.trim())o.mergeType=1;else{if(!t(o.mergeType)||"2"!==o.mergeType.trim())throw new Error(`ranges-merge: [THROW_ID_02] opts.mergeType was customised to a wrong thing! It was given of a type: "${typeof o.mergeType}", equal to ${JSON.stringify(o.progressFn,null,4)}`);o.mergeType=2}if("boolean"!=typeof o.joinRangesThatTouchEdges)throw new Error(`ranges-merge: [THROW_ID_04] opts.joinRangesThatTouchEdges was customised to a wrong thing! It was given of a type: "${typeof o.joinRangesThatTouchEdges}", equal to ${JSON.stringify(o.joinRangesThatTouchEdges,null,4)}`)}else o=A(a);const n=A(r).filter(r=>void 0!==r[2]||r[0]!==r[1]);let s,i,l;const c=(s=o.progressFn?Tr(n,{progressFn:r=>{(l=Math.floor(r/5))!==i&&(i=l,o.progressFn(l))}}):Tr(n)).length-1;for(let r=c;r>0;r--)o.progressFn&&(l=Math.floor(78*(1-r/c))+21)!==i&&l>i&&(i=l,o.progressFn(l)),(s[r][0]<=s[r-1][0]||!o.joinRangesThatTouchEdges&&s[r][0]<s[r-1][1]||o.joinRangesThatTouchEdges&&s[r][0]<=s[r-1][1])&&(s[r-1][0]=Math.min(s[r][0],s[r-1][0]),s[r-1][1]=Math.max(s[r][1],s[r-1][1]),void 0!==s[r][2]&&(s[r-1][0]>=s[r][0]||s[r-1][1]<=s[r][1])&&null!==s[r-1][2]&&(null===s[r][2]&&null!==s[r-1][2]?s[r-1][2]=null:void 0!==s[r-1][2]?2===o.mergeType&&s[r-1][0]===s[r][0]?s[r-1][2]=s[r][2]:s[r-1][2]+=s[r][2]:s[r-1][2]=s[r][2]),s.splice(r,1),r=s.length);return s}(y,{joinRangesThatTouchEdges:!1}):null}});
