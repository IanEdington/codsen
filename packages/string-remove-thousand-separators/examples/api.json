{"_quickTake.js":{"title":"Quick Take","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport &#x7B; remSep &#x7D; from \"string-remove-thousand-separators\";\n\n// ðŸ‡¬ðŸ‡§ ðŸ‡ºðŸ‡¸ thousand separators:\nassert.equal(remSep(\"1,000,000.00\"), \"1000000.00\");\n\n// ðŸ‡·ðŸ‡º  thousand separators:\nassert.equal(remSep(\"1 000 000,00\"), \"1000000,00\");\n// (if you want it converted to Western notation with dot,\n// set opts.forceUKStyle = true\n\n// ðŸ‡¨ðŸ‡­ thousand separators:\nassert.equal(remSep(\"1'000'000.00\"), \"1000000.00\");\n\n// IT'S SMART TOO:\n\n// will not delete if the thousand separators are mixed:\nconst input = \"100,000,000.000\";\nassert.equal(remSep(input), input);\n// ^ does nothing\n\n// but will remove empty space, even if there is no decimal separator:\n// (that's to cope with Russian notation integers that use thousand separators)\nassert.equal(remSep(\"100 000 000 000\"), \"100000000000\");\n\n// while removing thousand separators, it will also pad the digits to two decimal places\n// (optional, on by default, to turn it off set opts.padSingleDecimalPlaceNumbers to `false`):\nassert.equal(remSep(\"100,000.2\"), \"100000.20\");\nconsole.log();\n// ^ Western notation\n\nassert.equal(remSep(\"100 000,2\"), \"100000,20\");\n// ^ Russian notation\n\nassert.equal(remSep(\"100'000.2\"), \"100000.20\");\n// ^ Swiss notation"}}