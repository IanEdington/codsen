/**
 * generate-atomic-css
 * Generate Atomic CSS
 * Version: 1.0.1
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://gitlab.com/codsen/codsen/tree/master/packages/generate-atomic-css
 */

!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n((e=e||self).generateAtomicCss={})}(this,function(e){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var t=(e,n)=>{if(n=Object.assign({preserveNewLines:!1},n),"string"!=typeof e)throw new TypeError(`Expected input to be of type \`string\`, got \`${typeof e}\``);if(!n.preserveNewlines)return e.split(/\r?\n/);const t=e.split(/(\r?\n)/),o=[];for(let e=0;e<t.length;e+=2)o.push(t[e]+(t[e+1]||""));return o};e.generateAtomicCss=function(e,o){if("string"!=typeof e)throw new Error('generate-atomic-css: [THROW_ID_01] First input argument must be a string! It was given as "'.concat(JSON.stringify(e,null,4),'" (type ').concat(n(e),")"));var c,i="GENERATE-ATOMIC-CSS-CONFIG-STARTS",r="GENERATE-ATOMIC-CSS-CONFIG-ENDS",s="GENERATE-ATOMIC-CSS-CONTENT-STARTS",f="GENERATE-ATOMIC-CSS-CONTENT-ENDS",a=Object.assign({},{includeConfig:!0,includeHeadsAndTails:!0,pad:!0,configOverride:null},o);if(a.configOverride)c=a.configOverride;else{if(!(e.includes(i)&&e.includes(r)&&e.includes(s)&&e.includes(f)))throw new Error("generate-atomic-css: [THROW_ID_01] The input string does not contain:\n".concat(e.includes(i)?"":'* config heads, "'.concat(i,'"\n')).concat(e.includes(r)?"":'* config tails, "'.concat(r,'"\n')).concat(e.includes(s)?"":'* content heads, "'.concat(s,'"\n')).concat(e.includes(f)?"":'* content heads, "'.concat(f,'"\n')));c=e.slice(e.indexOf(i)+i.length,e.indexOf(r))}return"".concat(e.slice(0,e.indexOf(s)+s.length)).concat(function(e){return t(e).map(function(e){return e.includes("$$$")?function(e){var n=e.split("|"),t=0,o=500;n[1]&&(n[2]?(t=n[1],o=n[2]):o=n[1]);for(var c="",i=t;i<=o;i++)c+="".concat(0===i?"":"\n").concat(0===i?n[0].replace(/\$\$\$(px|em|%|rem|cm|mm|in|pt|pc|ex|ch|vw|vmin|vmax)?/g,i):n[0].replace(/\$\$\$/g,i));return c}(e):e}).join("\n")}(c)).concat(e.slice(e.indexOf(f)))},e.version="1.0.1",Object.defineProperty(e,"__esModule",{value:!0})});
